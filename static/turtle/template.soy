{namespace turtlepage}

/**
 * This is a Closure Template.
 *
 * To build the US English version, run:
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat generated/en_us.js --srcs ../common.soy,template.soy
 *
 * To fully internationalize, follow the instructions in ../common.soy.
 */

/**
 * Common code for creating procedures drawing different regular polygons.
 * @param title Title of procedure.
 * @param modifiers String containing any optional keys and values for the initial
 *        <block> tag, such as 'x="20" y="20" editable="false"'.
 * @param sides Number of sides.
 * @param length 0 if a length parameter should be used, a positive number otherwise
 */
{template .polygon autoescape="false"}
  <block type="procedures_defnoreturn" {$modifiers}>
    <mutation>
      {if $length == 0}
        <arg name="length"></arg>
      {/if}
    </mutation>
    <title name="NAME">{$title}</title>
    <statement name="STACK">
      <block type="controls_repeat" {$modifiers}>
        <title name="TIMES">{$sides}</title>
        <statement name="DO">
          <block type="draw_move" {$modifiers}>
            <value name="VALUE">
              {if $length == 0}
                <block type="variables_get_length"></block>
              {else}
                <block type="math_number" {$modifiers}>
                  <title name="NUM">{$length}</title>
                </block>
              {/if}
            </value>
            <next>
              <block type="draw_turn" {$modifiers}>
                <value name="VALUE">
                  <block type="math_number" {$modifiers}>
                    <title name="NUM">{360 / $sides}</title>
                  </block>
                </value>
              </block>
            </next>
          </block>
        </statement>
      </block>
    </statement>
  </block>
{/template}


/**
 * Messages for translation.
 */
{template .messages}
  <div id="MSG" style="display: none">
    // Used in blocks.js for general turtle graphics blocks
    <span id="colourTooltip">{msg meaning="Turtle.colourTooltip" desc="TODO"}Changes the color of the pen.{/msg}</span>
    <span id="degrees">{msg meaning="Turtle.degrees" desc="TODO"}degrees{/msg}</span>
    <span id="hideTurtle">{msg meaning="Turtle.hideTurtle" desc="TODO"}hide turtle{/msg}</span>
    <span id="moveBackward">{msg meaning="Turtle.moveBackward" desc="TODO"}move backward by{/msg}</span>
    <span id="moveForward">{msg meaning="Turtle.moveForward" desc="TODO"}move forward by{/msg}</span>
    <span id="moveForwardTooltip">{msg meaning="Turtle.moveForwardTooltip" desc="TODO"}Moves the turtle forward.{/msg}</span>
    <span id="jumpBackward">{msg meaning="Turtle.jumpBackward" desc="TODO"}jump backward by{/msg}</span>
    <span id="jumpForward">{msg meaning="Turtle.jumpForward" desc="TODO"}jump forward by{/msg}</span>
    <span id="jumpForwardTooltip">{msg meaning="Turtle.jumpForwardTooltip" desc="TODO"}Moves the turtle forward without leaving any marks.{/msg}</span>
    <span id="moveTooltip">{msg meaning="Turtle.moveTooltip" desc="TODO"}Moves the turtle forward or backward by the specified amount.{/msg}</span>
    <span id="penDown">{msg meaning="Turtle.penDown" desc="TODO"}pen down{/msg}</span>
    <span id="penTooltip">{msg meaning="Turtle.penTooltip" desc="TODO"}Lifts or lowers the pen, to start or stop drawing.{/msg}</span>
    <span id="penUp">{msg meaning="Turtle.penUp" desc="TODO"}pen up{/msg}</span>
    <span id="dots">{msg meaning="Turtle.dots" desc="TODO"}dots{/msg}</span>
    <span id="setColour">{msg meaning="Turtle.setColour" desc="TODO"}set color{/msg}</span>
    <span id="setWidth">{msg meaning="Turtle.setWidth" desc="TODO"}set width{/msg}</span>
    <span id="showTurtle">{msg meaning="Turtle.showTurtle" desc="TODO"}show turtle{/msg}</span>
    <span id="turnLeft">{msg meaning="Turtle.turnLeft" desc="TODO"}turn left by{/msg}</span>
    <span id="turnRightTooltip">{msg meaning="Turtle.turnRightTooltip" desc="TODO"}Turns the turtle right by the specified angle.{/msg}</span>
    <span id="turnRight">{msg meaning="Turtle.turnRight" desc="TODO"}turn right by{/msg}</span>
    <span id="turnTooltip">{msg meaning="Turtle.turnTooltip" desc="TODO"}Turns the turtle left or right by the specified number of degrees.{/msg}</span>
    <span id="turtleVisibilityTooltip">{msg meaning="Turtle.turtleVisibilityTooltip" desc="TODO"}Makes the turtle (green circle and arrow) visible or invisible.{/msg}</span>
    <span id="widthTooltip">{msg meaning="Turtle.widthTooltip" desc="TODO"}Changes the width of the pen.{/msg}</span>
    <span id="loopVariable">{msg meaning="Turtle.loopVariable" desc="TODO"}counter{/msg}</span>

    // Used for displaying block count.
    <span id="blocksUsed">{msg meaning="Turtle.blocksUsed" desc="TODO"}Blocks used: %1{/msg}</span>

    // Used for alerting user that levels 8 and 9 of page 3 require
    // doing the previous level.
    <span id="notReadyForLevel">
      {if $ij.page == 3 and $ij.level == 8}
        {msg meaning="Turtle.drawAHouseNotDefined8" desc="TODO"}
          You need to complete level 7 before doing this level.
        {/msg}
      {elseif $ij.page == 3 and $ij.level == 9}
        {msg meaning="Turtle.drawAHouseNotDefined9" desc="TODO"}
          You need to complete levels 7 and 8 before doing this level.
        {/msg}
      {/if}
    </span>

    // Used for providing feedback on colour use.
    <span id="notBlackColour">{msg meaning="Turtle.notBlackColour" desc="TODO"}You need to set a color other than black for this level.{/msg}</span>
    <span id="tooFewColours">{msg meaning="Turtle.tooFewColours" desc="TODO"}You need to use at least %1 different colors on this level.  You used only %2.{/msg}</span>
    <span id="wrongColour">{msg meaning="Turtle.wrongColour" desc="TODO"}Your picture is the wrong color.  For this level, it needs to be %1.{/msg}</span>
    <span id="extraColours">{msg meaning="Turtle.extraColours" desc="TODO"}You used extra colors.  Nice!{/msg}</span>

    // Used in blocks.js for tutorial-only blocks.
    <span id="drawASquare">{msg meaning="Turtle.drawASquare" desc="TODO"}draw a square{/msg}</span>
    <span id="lengthParameter">{msg meaning="Turtle.lengthParameter" desc="TODO"}length{/msg}</span>
    <span id="drawASnowman">{msg meaning="Turtle.drawASnowman" desc="TODO"}draw a snowman{/msg}</span>
    <span id="heightParameter">{msg meaning="Turtle.heightParameter" desc="TODO"}height{/msg}</span>

    // Used in common.js.
    <span id="title">{msg meaning="Turtle.title" desc="TODO"}CS First: Turtle Graphics %1{/msg}</span>
    <span id="numBlocksNeeded">
          {msg meaning="Turtle.numBlocksNeeded" desc="TODO"}
            This level can be solved with %1 blocks.  You used %2.
          {/msg}
    </span>

  </div>
{/template}

/**
 * Show interstitial messages.  These will be replaced by modal dialogs.
 */
{template .showInterstitials}
  /* INTERSTITIALS.
   *
   * Show interstitial message if one is specified.
   * A specification consists of an array of 1 or more elements:
   *   0: A string to be displayed.
   *   1: One of the following strings (unless nothing more should be
   *      done):
   *      - 'picture', in which case the specified picture is displayed.
   *      - 'picture-table', in which case the specified pictures are
   *        displayed in a table, one per column.
   *      - 'quiz', in which case a question picture and set of answers
   *        are displayed; the user selects an answer; and the answer is
   *        checked.  The user is not allowed to continue until the
   *        correct answer has been chosen.
   *      - 'animations', in which the specified images are hidden until
   *        the user presses a "Show me" button.
   *      - 'special', in which case special-purpose code based on the
   *        page and level can be hardcoded below.
   *   2: Presence and contents depend on previous cell value:
   *      - 'animations': an array of URLs of animated gifs to display.
   *      - 'picture': the URL of the picture to display.
   *      - 'picture-table': an array of URLs of pictures to display.
   *      - 'quiz': an array of two number, the first being the number of
   *         quiz answer and the second the index of the correct answer,
   *         both 1-based.  (Image file names are built up automatically
   *         based on the page number, level number, and choice number.
   *         For example, if there is a quiz on page 1, level 2, the
   *         question would be in the image 'p1-l2-q.png', and the third
   *         displayed possible answer would be 'p1-l2-a3.png'.)
   *      - 'special': unspecified.
   */
  {if $ij.reinf[0]}
    <div id="bubble">
      <div id="interstitial"><b>{$ij.reinf[0]}</b></div>
    </div>
    <img id="turtle" height=45 width=130 src="turtle.png">
  {/if}
  {switch $ij.reinf[1]}
    {case 'picture'}
      <table>
        <tr><br></tr>
        <tr><td><img src="{$ij.reinf[2]}"></td></tr>
        <tr height=40><br><br></tr>
      </table>
    {case 'picture-table'}
      <table>
        {foreach $tuple in $ij.reinf[2]}
          <tr height="100" valign="middle">
            <td><img src="{$tuple[1]}"></td><td>{$tuple[0]}</td>
          </tr>
        {/foreach}
      </table>
    {case 'quiz'}
      <table>
        <tr><td colspan={$ij.reinf[2][0]}><img src="p{$ij.page}-l{$ij.level}-q.png"></td></tr>
        <tr>
          {for $i in range(1, $ij.reinf[2][0] + 1)}
            <td><img src="p{$ij.page}-l{$ij.level}-a{$i}.png" class="answer" onclick="alert({if $i == $ij.reinf[2][1]}'{msg meaning="Turtle.rightAnswer" desc="TODO"}You got it!{/msg}'); document.getElementById('continueButton').style.display = 'inline';{else}'{msg meaning="Turtle.wrongAnswer" desc="TODO"}Wrong!  Try again.{/msg}');{/if}"></td>
          {/for}
        </tr>
      </table>
    {case 'animations'}
      <p><button id="showButton" style="display: inline" class="launch" onclick="this.style.display = 'none'; document.getElementById('animation').style.display='inline'; document.getElementById('continueButton').style.display='inline';">{msg meaning="Turtle.showMe" desc="TODO"}Show me{/msg}</button></p>
      <div id="animation" style="display: none">
        <table>
          <tr>
            {foreach $file in $ij.reinf[2]}
              <td><img src="{$file}"></td>
            {/foreach}
          </tr>
        </table>
      </div>
    {case 'special'}
      // Special cases can be implemented here.
  {/switch}
  <button id="continueButton" style="display: {if $ij.reinf[1] == 'quiz' or $ij.reinf[1] == 'animations'}none{else}inline{/if}" class="launch" onclick="Turtle.continueButtonClick();">{msg meaning="Turtle.gotoNext" desc="TODO"}Continue{/msg}</button>
{/template}

/**
 * Define the starting blocks for each page and level.
 * These are referenced from turtle.js.
 */
{template .startBlocks}
  // Show the starting blocks for the given page and level.
  <div id="start_blocks" style="display: none">
    {if $ij.page == 1}
      {switch $ij.level}
        {case 1, 2}
          <block type="draw_move_inline" x="20" y="20"></block>
        {case 3, 4, 5, 6}
          <block type="controls_repeat" x="20" y="20">
            <title name="TIMES">{if $ij.level == 3 or $ij.level == 6 or $ij.level == 7}4{else}3{/if}</title>
          </block>
        {case 7}
          <block type="draw_turn_inline" x="20" y="20">
            <title name="DIR">turnRight</title>
            <title name="VALUE">90</title>
          </block>
        {case 8}
          <block type="draw_colour" x="20" y="100">
            <value name="COLOUR">
              <block type="colour_random"></block>
            </value>
            <next>
              <block type="draw_move_inline">
                <title name="DIR">moveForward</title>
                <title name="VALUE">100</title>
                <next>
                  <block type="draw_move_inline">
                    <title name="DIR">moveBackward</title>
                    <title name="VALUE">100</title>
                    <next>
                      <block type="draw_turn_inline">
                        <title name="DIR">turnRight</title>
                        <title name="VALUE">45</title>
                      </block>
                    </next>
                  </block>
                </next>
              </block>
            </next>
          </block>
        {case 9}
          <block type="controls_repeat" deletable="false" movable="false" x="20" y="20">
            <title name="TIMES">??</title>
            <statement name="DO">
              <block type="draw_move" editable="false" deletable="false" movable="false">
                <value name="VALUE">
                  <block type="math_number" editable="false" deletable="false" movable="false">
                    <title name="NUM">1</title>
                  </block>
                </value>
                <next>
                  <block type="draw_turn" editable="false" deletable="false" movable="false">
                    <value name="VALUE">
                      <block type="math_number" editable="false" deletable="false" movable="false">
                        <title name="NUM">1</title>
                      </block>
                    </value>
                  </block>
                </next>
              </block>
            </statement>
          </block>
        {case 10}
          <block type="draw_move_inline" x="20" y="20">
            <title name="DIR">moveForward</title>
            <title name="VALUE">100</title>
          </block>
      {/switch}
    {elseif $ij.page == 2}
      // No blocks are provided for levels 1 and 2.
      {if $ij.level == 3 or $ij.level == 5}
        /*  Call "draw a square".  */
        <block type="draw_a_square" inline="true">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 3}100{else}50{/if}</title>
            </block>
          </value>
        </block>
      {elseif $ij.level == 4}
        /*  Three-square code.  */
        <block type="controls_repeat" deletable="false" movable="false">
          <title name="TIMES">???</title>
          <statement name="DO">
            <block type="draw_colour">
              <value name="COLOUR">
                <block type="colour_random"></block>
              </value>
              <next>
                <block type="draw_a_square" inline="true" editable="false" deletable="false" movable="false">
                  <value name="VALUE">
                    <block type="math_number" deletable="false" movable="false">
                      <title name="NUM">???</title>
                    </block>
                  </value>
                  <next>
                    <block type="draw_turn" editable="false" deletable="false" movable="false">
                      <value name="VALUE">
                        <block type="math_number" deletable="false" movable="false">
                          <title name="NUM">???</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {elseif $ij.level == 6}
        <block type="controls_for_counter" inline="true" x="20" y="20">
          <title name="VAR">{msg meaning="Turtle.loopVariable" desc="IBID"}counter{/msg}</title>
          <value name="FROM">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}50{else}10{/if}</title>
            </block>
          </value>
          <value name="TO">
            <block type="math_number">
              <title name="NUM">{if $ij.level == 6}90{else}100{/if}</title>
            </block>
          </value>
          <value name="BY">
            <block type="math_number">
              <title name="NUM">10</title>
            </block>
          </value>
          <statement name="DO">
            <block type="draw_a_square" inline="true">
              <value name="VALUE">
                <block type="math_number">
                  <title name="NUM">10</title>
                </block>
              </value>
            </block>
          </statement>
        </block>
      {elseif $ij.level == 7}
        {for $i in range(25, 61, 5)}
          <block type="draw_move" {if $i == 25}x="300" y="100"{/if} inline="false" editable="false" disabled="true">
            <title name="DIR">moveForward</title>
              <value name="VALUE">
                <block type="math_number" disabled="true">
                  <title name="NUM">{$i}</title>
                </block>
              </value>
              <next>
                <block type="draw_turn" inline="false" editable="false" disabled="true">
                  <title name="DIR">turnRight</title>
                  <value name="VALUE">
                    <block type="math_number" disabled="true">
                      <title name="NUM">90</title>
                    </block>
                  </value>
                  <next>
        {/for}
        {for $i in range(5, 25, 5)}
                </block>
              </next>
            </block>
          </next>
        {/for}
      {elseif $ij.level == 8 or $ij.level == 9}
        <block type="draw_a_snowman" x="20" y="20">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">150</title>
            </block>
          </value>
        </block>
      {elseif $ij.level == 10}
        <block type="draw_width" inline="false" x="158" y="67">
          <value name="WIDTH">
            <block type="math_number">
              <title name="NUM">1</title>
            </block>
          </value>
          <next>
            <block type="controls_for_counter" inline="true">
              <title name="VAR">length</title>
              <value name="FROM">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <value name="TO">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
              <value name="BY">
                <block type="math_number">
                  <title name="NUM">1</title>
                </block>
              </value>
              <statement name="DO">
                <block type="draw_move" inline="false">
                  <title name="DIR">moveForward</title>
                  <value name="VALUE">
                    <block type="variables_get_length"></block>
                  </value>
                  <next>
                    <block type="draw_turn" inline="false">
                      <title name="DIR">turnRight</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">91</title>
                        </block>
                      </value>
                    </block>
                  </next>
                </block>
              </statement>
            </block>
          </next>
        </block>
      {/if}
    {else}  // page == 3
      /*  Define "draw a square".  */
      {call .polygon}
        {param title}draw a square{/param}
        {param modifiers}x="20" y="20" editable="false" deletable="false" movable="false"{/param}
        {param sides: 4 /}
        {param length}{if $ij.level >= 6}0{else}100{/if}{/param}
      {/call}
      {if $ij.level == 1}
        /*  Define "draw a circle".  */
        {call .polygon}
          {param title}draw a circle{/param}
          {param modifiers}x="340" y="20" editable="false" deletable="false" movable="false"{/param}
          {param sides: 360 /}
          {param length}1{/param}
        {/call}
      {/if}
      {if $ij.level == 2}
        <block type="procedures_defnoreturn" x="20" y="175">
          <title name="NAME">draw a triangle</title>
        </block>
      {elseif $ij.level >= 3}
        /*  Define "draw a triangle".  */
        {call .polygon}
          {param title}draw a triangle{/param}
          {param modifiers}{if $ij.level == 6}x="20" y="190"{else}x="360" y="20" editable="false" deletable="false"{/if}{/param}
          {param sides: 3 /}
          {param length}{if $ij.level >= 7}0{else}100{/if}{/param}
        {/call}
      {/if}
      {if $ij.level == 7}
        /*  Define "draw a house".  */
        <block type="procedures_defnoreturn" x="20" y="200">
          <mutation>
            {if $ij.level == 11}<arg name="length"></arg>{/if}
          </mutation>
          <title name="NAME">draw a house</title>
          <statement name="STACK">
            <block type="procedures_callnoreturn" inline="false">
              <mutation name="draw a square">
                <arg name="length">
              </mutation>
              <value name="ARG0">
                {if $ij.level == 7}
                  <block type="math_number">
                    <title name="NUM">100</title>
                  </block>
                {else}
                  <block type="variables_get_length"></block>
                {/if}
              </value>
              <next>
                <block type="draw_move" inline="false">
                  <title name="DIR">moveForward</title>
                  <value name="VALUE">
                    {if $ij.level == 7}
                      <block type="math_number">
                        <title name="NUM">100</title>
                      </block>
                    {else}
                      <block type="variables_get_length"></block>
                    {/if}
                  </value>
                  <next>
                    <block type="draw_turn" inline="false">
                      <title name="DIR">turnRight</title>
                      <value name="VALUE">
                        <block type="math_number">
                          <title name="NUM">30</title>
                        </block>
                      </value>
                      <next>
                        <block type="procedures_callnoreturn" inline="false">
                          <mutation name="draw a triangle">
                            <arg name="length"></arg>
                          </mutation>
                          <value name="ARG0">
                            {if $ij.level == 7}
                              <block type="math_number">
                                <title name="NUM">100</title>
                              </block>
                            {else}
                              <block type="variables_get_length"></block>
                            {/if}
                          </value>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {/if}  // End of region in which "draw a square" is defined.
    {/if}
  </div>  // End of "start_blocks".
{/template}

/**
 * Show instructions.
 */
{template .showInstructions}
  {switch $ij.page}
    {case 1}
      {switch $ij.level}
        {case 1}{msg meaning="Turtle.instructions1_1" desc="TODO"}I'm a turtle with chalk on my belly. Stack up blocks and press "Run Program" to make me draw the shown picture.{/msg}
        {case 2}{msg meaning="Turtle.instructions1_2" desc="TODO"}Draw a square, making each side a different color.{/msg}
        {case 3}{msg meaning="Turtle.instructions1_3" desc="TODO"}Make a square using only 3 blocks.  (Remember that blocks to set color are free.){/msg}
        {case 4}{msg meaning="Turtle.instructions1_4" desc="TODO"}Draw a triangle whose sides are all 100 dots and are in random colors.  You'll have to figure out how far to turn.{/msg}
        {case 5}{msg meaning="Turtle.instructions1_5" desc="TODO"}Draw a triangle and then a square to draw an envelope.{/msg}
        {case 6}{msg meaning="Turtle.instructions1_6" desc="TODO"}Can you figure out how draw this triangle and square?{/msg}
        {case 7}{msg meaning="Turtle.instructions1_7" desc="TODO"}See if you can draw these green glasses.{/msg}
        {case 8}{msg meaning="Turtle.instructions1_8" desc="TODO"}After trying out these blocks, see what happens if you make them repeat 8 times.  It should look a little different every time you run it.{/msg}
        {case 9}{msg meaning="Turtle.instructions1_9" desc="TODO"}Figure out what number to replace the question marks with to draw a circle.{/msg}
        {case 10}{msg meaning="Turtle.instructions1_10" desc="TODO"}Draw anything you want. Some ideas are a stick figure, snowflake, or spiral.  You could also try out the new "set width" block.  Have fun!{/msg}
      {/switch}
    {case 2}
      {switch $ij.level}
        {case 1}{msg meaning="Turtle.instructions2_1" desc="TODO"}Find the familiar blocks in the new categories to draw a square in your favorite color.{/msg}
        {case 2}{msg meaning="Turtle.instructions2_2" desc="TODO"}Use the new "draw a square" block, found in the "Functions" category, to draw a small green square.{/msg}
        {case 3}{msg meaning="Turtle.instructions2_3" desc="TODO"}Use the "repeat" block to draw 3 squares of size 100, each 120 degrees apart, in random colors.{/msg}
        {case 4}{msg meaning="Turtle.instructions2_4" desc="TODO"}Now change the code to draw 36 squares, each 10 degrees apart.{/msg}
        {case 5}{msg meaning="Turtle.instructions2_5" desc="TODO"}Draw squares with sides of 50, 60, 70, 80, and 90 dots.  You'll need lots of blocks.{/msg}
        {case 6}{msg meaning="Turtle.instructions2_6" desc="TODO"}Modify this program with the "counter" block (found in the Variables category) to draw the same series of squares with fewer blocks than on the previous level.{/msg}
        {case 7}{msg meaning="Turtle.instructions2_7" desc="TODO"}Replace the pale (disabled) blocks with a "count with" block (in the Loops category) and "counter" block (in the Variables category) to draw the same spiral.{/msg}
        {case 8}{msg meaning="Turtle.instructions2_8" desc="TODO"}Draw three snowmen 150 dots tall in different colors, 100 dots apart.  Use the new "draw a snowman" function and "jump forward" block.{/msg}
        {case 9}{msg meaning="Turtle.instructions2_9" desc="TODO"}Use a "count with" loop to draw a family of snowmen with heights of 110, 100, 90, 80, and 70 dots, each 60 dots apart.{/msg}
        {case 10}{msg meaning="Turtle.instructions2_10" desc="TODO"}Draw whatever you want.  One idea is experimenting with different types of spirals.  What happens if you change the turn amount, rather than the move amount?  TODO: Add starting blocks.{/msg}
      {/switch}
    {case 3}
      {switch $ij.level}
        {case 1}{msg meaning="Turtle.instructions3_1" desc="TODO"}You can now see how the "draw a square" and "draw a circle" functions are defined.  Defining a function doesn't run its blocks.  You have to pull out the "draw a square" block to actually draw a square.{/msg}
        {case 2}{msg meaning="Turtle.instructions3_2" desc="TODO"}Using the "draw a square" function as an example, create a "draw a triangle" function and use it.{/msg}
        {case 3}{msg meaning="Turtle.instructions3_3" desc="TODO"}Draw triangular fences around the cats and a square fence around the cow.  Tip: Test the program as you go along.{/msg}
        {case 4}{msg meaning="Turtle.instructions3_4" desc="TODO"}See if you can figure out how to use "draw a square" and "draw a triangle" (and some other blocks) to draw a house around the lion.{/msg}
        {case 5}{msg meaning="Turtle.instructions3_5" desc="TODO"}Now create a "draw a house" function and use it house two cats.{/msg}
        {case 6}{msg meaning="Turtle.instructions3_6" desc="TODO"}Using "draw a square" as an example, add an input named "length" to "draw a triangle".  Then, draw triangles in different colors around the animals.{/msg}
        {case 7}{msg meaning="Turtle.instructions3_7" desc="TODO"}Add a "height" input to "draw a house" and build a big house for the elephant.{/msg}
        {case 8}{msg meaning="Turtle.instructions3_8" desc="TODO"}Here are all of the blocks from the previous level.  Modify "draw a house" so the turtle ends up at the bottom right corner of the new house.  Use this modified function to house all the animals.{/msg}
        {case 9}{msg meaning="Turtle.instructions3_9" desc="TODO"}Use a "count with" block and your code from the previous level to draw houses of size 50, 100, and 150 in different colors.{/msg}
        {case 10}{msg meaning="Turtle.instructions3_10" desc="TODO"}You're now free to do whatever you want.  One idea is to try running this program with different turn amounts (higher or lower than 90).  Other ideas are to draw a star, circle, heart, or animal.{/msg}
    {/switch}
  {/switch}
{/template}

/**
 * Web page structure.
 */
{template .start}
  {call .messages /}
  {call .startBlocks /}

  <script type="text/javascript" src="../blockly_compressed.js"></script>
  // javascript_compressed must be loaded before blocks.js.
  <script type="text/javascript" src="../javascript_compressed.js"></script>
  <script type="text/javascript" src="../{$ij.langSrc}"></script>
  <script type="text/javascript" src="blocks.js"></script>

  {if $ij.reinf}
    {call .showInterstitials /}
  {else}
    // If we get here, this is a real level, not an interstitial.
    <script type="text/javascript" src="../slider.js"></script>
    <script type="text/javascript" src="answers.js"></script>

    // Show level bar and language dropdown.
    <table {call apps.menu}{param menu: $ij.menu /}{/call} width="100%" style="padding-top: 1em;">
      <tr>
        <td>
          <h1>
            <span id="title">
              <a href="https://sites.google.com/site/computersciencefirst/">
                {msg meaning="Apps.projectMessage" desc="The project name. 'CS'
                is an abbreviation for Computer Science. 'First' refers to the
                project's goal of introducing students to programming as
                early as possible in their life."}CS First{/msg}</a>
              {sp}:{sp}
              {switch $ij.page}
                {case 1}
                  {msg meaning="Turtle.turtle1" desc="brief title - Specifies that this is Blockly's '''Turtle 1''' tutorial."}Turtle 1{/msg}
                {case 2}
                  {msg meaning="Turtle.turtle2" desc="brief title - Specifies that this is Blockly's '''Turtle 2''' tutorial."}Turtle 2{/msg}
                {case 3}
                  {msg meaning="Turtle.turtle3" desc="brief title - Specifies that this is Blockly's '''Turtle 3''' tutorial."}Turtle 3{/msg}
              {/switch}
            </span>
            {sp}&nbsp;{sp}
            {for $i in range(1, 11)}
              {sp}
              {if $i == $ij.level}
                {if $i > 9}
                  <span class="selected doubleDigit tab">{$i}</span>
                {else}
                  <span class="selected tab">{$i}</span>
                {/if}
              {else}
                {if $i < $ij.level}
                  <a class="tab previous" href="?lang={$ij.lang}&page={$ij.page}&level={$i}">{$i}</a>
                {else}
                  <a class="tab" href="?lang={$ij.lang}&page={$ij.page}&level={$i}">{$i}</a>
                {/if}
              {/if}
            {/for}
          </h1>
        </td>
        <td class="farSide">
//          <select id="languageMenu" onchange="BlocklyApps.changeLanguage();"></select>
        </td>
      </tr>
    </table>
    // First column has prompt, capacity, canvas, slider, and buttons.
      <div id="bubble">
        <div id="prompt">
          {call .showInstructions /}
        </div>
      </div>
      <div id="blockCount"></div>
      <div id="visualization">
        <canvas id="scratch" width="400" height="400" style="display: none"></canvas>
        <canvas id="answer" width="400" height="400" style="display: none"></canvas>
        <canvas id="images" width="400" height="400" style="display: none"></canvas>
        <canvas id="display" width="400" height="400"></canvas>
      </div>
      <table style="padding-top: 1em;" width=400>
        <tr>
          <td style="width: 190px; text-align: center">
            <svg
               id="slider"
               xmlns="http://www.w3.org/2000/svg"
               xmlns:svg="http://www.w3.org/2000/svg"
               xmlns:xlink="http://www.w3.org/1999/xlink"
               version="1.1"
               width="150"
               height="50">
              <!-- Slow icon. -->
              <clipPath id="slowClipPath">
                <rect width=26 height=12 x=5 y=14 />
              </clipPath>
              <image xlink:href="icons.png" height=42 width=84 x=-21 y=-10
                  clip-path="url(#slowClipPath)" />
              <!-- Fast icon. -->
              <clipPath id="fastClipPath">
                <rect width=26 height=16 x=120 y=10 />
              </clipPath>
              <image xlink:href="icons.png" height=42 width=84 x=120 y=-11
                  clip-path="url(#fastClipPath)" />
            </svg>
          </td>
          <td style="width: 15px;">
            <img id="spinner" style="visibility: hidden;" src="loading.gif" height=15 width=15>
          </td>
          <td style="width: 190px; text-align: center">
            <button id="runButton" class="launch" onclick="Turtle.runButtonClick();">
              <img src="../media/1x1.gif" class="run icon21">
              {msg meaning="Turtle.runProgram" desc="TODO"}Run{/msg}
            </button>
            <button id="resetButton" class="launch" onclick="BlocklyApps.resetButtonClick();" style="display: none">
              <img src="../media/1x1.gif" class="stop icon21">
              {msg meaning="Turtle.resetProgram" desc="TODO"}Reset{/msg}
            </button>
          </td>
        </tr>
      </table>

      <div id="toolbarDiv">
        <button title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyApps.showCode(this);">
          <img src='../media/1x1.gif' class="code icon21">
        </button>
        <button id="linkButton" title="{msg meaning="Turtle.codeTooltip" desc="TODO"}See generated JavaScript code.{/msg}" onclick="BlocklyStorage.link();">
          <img src='../media/1x1.gif' class="link icon21">
        </button>
      </div>
    // Toolbox.
    {call .toolbox /}
    <div id="blockly"></div>
  {/if}
  {call .feedback /}
  <div id="shadow"></div>

  {call apps.dialog /}
  {call apps.codeDialog /}
  {call apps.storageDialog /}
{/template}

/**
 * Show feedback.
 */
{template .feedback}
  <div id="levelFeedback" class="dialogHiddenContent">
    <div style="padding-bottom: 0.7ex;"><br>
      <ul id="levelFeedbackText">
        <img class="stars feedback" id="star1" src="../star1.png">
        <img class="stars feedback" id="star2" src="../star2.png">
        <img class="stars feedback" id="star3" src="../star3.png">
        <span id="hintTitle" class="feedback" style="display: none; margin-left: -30px">
          {msg meaning="Turtle.hintTitle" desc="page text - this precedes suggestions to the user."}
            Hint:
          {/msg}
         </span>
        <li id="nextLevelMsg" style="display: none; margin-left: -40px;">{msg
          meaning="Turtle.nextLevel" desc="alert - This is displayed when
          the user solves the level, inviting them to precede to the next
          level of difficulty."}Congratulations! You have completed this
          level.{/msg}</li>
        <li id="finalLevelMsg" style="display: none; margin-left: -40px;">{msg
          meaning="Turtle.finalLevelMsg" desc="alert - This is displayed when
          the user solves the most difficult level."}Congratulations! You
          have solved the final level.{/msg}</li>

        // Missing block errors.
        <li id="moveForwardError1" class="feedback" style="display: none">
          {msg meaning="BlocklyApps.moveForwardError1Msg" desc="alert - This
            error message is displayed when the user has not used at least one
            of the move forward blocks that is required for this level."}You'll
            need to move me forward in order to draw anything.{/msg}</li>
        <li id="moveForwardError2" class="feedback" style="display: none">
          {msg meaning="BlocklyApps.moveForwardError2Msg" desc="TODO"}
            You need to use the "move forward" block.
          {/msg}</li>
        <li id="moveError1" class="feedback" style="display: none">
          {msg meaning="BlocklyApps.moveError1Msg" desc="alert - This
            error message is displayed when the user has not used at least one
            of the move blocks that is required for this level."}You'll
            need to move me in order to draw anything.{/msg}</li>
        <li id="moveError2" class="feedback" style="display: none">
          {msg meaning="BlocklyApps.moveError2Msg" desc="TODO"}
            You need to use the "move" block.
          {/msg}</li>
        <li id="turnRightError1" class="feedback" style="display: none">
          {msg meaning="Turtle.moveForwardError1Msg" desc="TODO"}
            I'll need to turn in order to draw this picture.
          {/msg}</li>
        <li id="turnRightError2" class="feedback" style="display: none">
          {msg meaning="Turtle.moveForwardError2Msg" desc="TODO"}
            I'll need to turn right by 90 degrees to draw this picture.
          {/msg}</li>
        <li id="turnError1" class="feedback" style="display: none">
          {msg meaning="Turtle.turnError1Msg" desc="TODO"}
            I'll need to turn in order to draw this picture.
          {/msg}</li>
        <li id="turnError2" class="feedback" style="display: none">
          {msg meaning="Turtle.turnError2Msg" desc="TODO"}
            Use a "turn" block.
          {/msg}</li>
        <li id="repeatError1" class="feedback" style="display: none">
          {msg meaning="Turtle.repeatError1Msg" desc="TODO"}
            The "repeat" block saves you from having to repeat yourself.
          {/msg}</li>
        <li id="repeatError2" class="feedback" style="display: none">
          {msg meaning="Turtle.repeatError2Msg" desc="TODO"}
            You need to use a "repeat" block.
          {/msg}</li>
        <li id="colour_randomError1" class="feedback" style="display: none">
          {msg meaning="Turtle.colour_randomError1Msg" desc="TODO"}
            The "set color" and "random color" blocks give you random
            (unpredictable) colors.
          {/msg}</li>
        <li id="colour_randomError2" class="feedback" style="display: none">
          {msg meaning="Turtle.colour_randomError2Msg" desc="TODO"}
            Pull out the "set color" block that contains a "random color" block,
            and put it in the appropriate place.
          {/msg}</li>
        <li id="penColourError1" class="feedback" style="display: none">
          {msg meaning="Turtle.drawColourError1Msg" desc="TODO"}
            To change the color I draw, use the "set color" block.
          {/msg}</li>
        <li id="penColourError2" class="feedback" style="display: none">
          {msg meaning="Turtle.drawColourError2Msg" desc="TODO"}
            Each "set color" block sets the color of everything I draw
            after it until the next "set color" block.
          {/msg}</li>
        <li id="forError1" class="feedback" style="display: none">
          {if $ij.page == 2}
            {switch $ij.level}
              {case 6}
                {msg meaning="Turtle.forError1Msg-p2-l6" desc="TODO"}
                  Reload this level to get the "count with" block back.
                {/msg}
              {case 7}
                {msg meaning="Turtle.forError1Msg-p2-l7" desc="TODO"}
                  You need a "count with" block to give the counter
                  values from 25 through 60.
                {/msg}
              {case 9}
                {msg meaning="Turtle.forError1Msg-p2-l9" desc="TODO"}
                  You need a "count with" block to give the counter
                  values from 110 down to 70.
                {/msg}
            {/switch}
          {elseif $ij.page == 3 and $ij.level == 9}
            {msg meaning="Turtle.forError1Msg-p3-l9" desc="TODO"}
              You need to use a "count with" block on this level.
            {/msg}
          {/if}
        </li>
        <li id="forError2" class="feedback" style="display: none">
          {if $ij.page == 2}
            {switch $ij.level}
              {case 6}
                {msg meaning="Turtle.forError1Msg-p2-l6" desc="IBID"}
                  Reload this level to get the "count with" block back.
                {/msg}
              {case 7}
                {msg meaning="Turtle.forError2Msg-p2-l7" desc="TODO"}
                  Open the Loops category, and drag out a "count with" block.
                {/msg}
              {case 9}
                {msg meaning="Turtle.forError2Msg-p2-l9" desc="TODO"}
                  Open the Loops category, and drag out a "count with" block.
                  Have it count from 110 to 70 by 10.
                {/msg}
            {/switch}
          {elseif $ij.page == 3 and $ij.level == 9}
            {msg meaning="Turtle.forError2Msg-p3-l9" desc="TODO"}
              You need to open the "Loops" drawer and pull out a "count with"
              block to count from 50 to 150 by 50s.
            {/msg}
          {/if}
        </li>
        <li id="get_counterError1" class="feedback" style="display: none">
          {if $ij.page == 2}
            {switch $ij.level}
              {case 6}
                {msg meaning="Turtle.getCounterError1Msg-p2-l6" desc="TODO"}
                  You need the "counter" block to draw squares of different lengths.
                {/msg}
              {case 7}
                {msg meaning="Turtle.getCounterError1Msg-p2-l7" desc="TODO"}
                  You need the "counter" block to draw lines of different lengths.
                {/msg}
              {case 9}
                {msg meaning="Turtle.getCounterError1Msg-p2-l9" desc="TODO"}
                  You need the "counter" block to draw snowmen of different heights.
                {/msg}
            {/switch}
          {elseif $ij.page == 3}
            {msg meaning="Turtle.getCounterError1Msg-p3" desc="TODO"}
              You need the "counter" block to draw houses of different heights.
            {/msg}
          {/if}
        </li>
        <li id="get_counterError2" class="feedback" style="display: none">
          {if $ij.page == 2}
            {switch $ij.level}
              {case 6}
                {msg meaning="Turtle.getCounterError2Msg-p2-l6" desc="TODO"}
                  From the "Variables" category, get the "counter" block, and use
                  it as the "length" input to "draw a square".
                {/msg}
              {case 7}
                {msg meaning="Turtle.getCounterError2Msg-p2-l7" desc="TODO"}
                  From the "Variables" category, get the "counter" block, and use
                  it as the input to the "move forward" block.
                {/msg}
              {case 9}
                {msg meaning="Turtle.getCounterError2Msg-p2-l9" desc="TODO"}
                  From the "Variables" category, get the "counter" block, and use
                  it as the input to the "draw a snowman" block.
                {/msg}
            {/switch}
          {elseif $ij.page == 3}
            {msg meaning="Turtle.getCounterError2Msg-p3" desc="TODO"}
              From the "Variables" category, get the "counter" block, and use
              it as the input to the "draw a house" block.
            {/msg}
          {/if}
        </li>
        <li id="draw_a_snowmanError1" class="feedback" style="display: none">
          {msg meaning="Turtle.draw_a_snowmanError1Msg" desc="TODO"}
            You need to use the "draw a snowman" block.
          {/msg}
        </li>
        <li id="draw_a_snowmanError2" class="feedback" style="display: none">
          {msg meaning="Turtle.draw_a_snowmanError2Msg" desc="TODO"}
            You can get the "draw a snowman" block from the "Functions" category.
          {/msg}
        </li>
        <li id="jumpError1" class="feedback" style="display: none">
          {msg meaning="Turtle.jumpError1Msg" desc="TODO"}
            The "jump forward" block moves the turtle without drawing anything.
          {/msg}
         </li>
        <li id="jumpError2" class="feedback" style="display: none">
          {msg meaning="Turtle.jumpError2Msg" desc="TODO"}
            Open the Actions category to Get the "jump forward" block, and use
            it to move the turtle between each snowman.
          {/msg}
        </li>
        // These are for the special "draw a square" block on Page 2.
        <li id="draw_a_squareError1" class="feedback" style="display: none">
          {msg meaning="Turtle.drawASquareError1Msg-p2" desc="TODO"}
            In this tutorial, to draw a square, use the new "draw a square" function.
          {/msg}
        </li>
        <li id="draw_a_squareError2" class="feedback" style="display: none">
          {msg meaning="Turtle.drawASquareError2Msg-p2" desc="TODO"}
            Open the Functions category and get a "draw a square" block.
          {/msg}
        </li>

        // These are for procedure calls on Page 3.
        <li id="callDrawASquareError1" class="feedback" style="display:none">
          {msg meaning="Turtle.drawASquareError1Msg-p3" desc="TODO"}
            The shown code tells the turtle <em>how</em> to draw a square but not
            to draw a square.  You need to pull out a "draw a square" block from
            the Functions category.
          {/msg}
        </li>
        <li id="callDrawASquareError2" class="feedback" style="display:none">
          {msg meaning="Turtle.drawASquareError2Msg-p3" desc="TODO"}
            From the current code, the turtle doesn't know that you want to draw a square.
            Pull out a "draw a square" block from the Functions category.
          {/msg}
        </li>
        <li id="callDrawATriangleError1" class="feedback" style="display:none">
          {msg meaning="Turtle.drawATriangleError1Msg-p3" desc="TODO"}
            You need a "draw a triangle" block to let the turtle know you
            want it to draw a triangle.
          {/msg}
        </li>
        <li id="callDrawATriangleError2" class="feedback" style="display:none">
          {msg meaning="Turtle.drawATriangleError2Msg-p3" desc="TODO"}
            To use your "draw a triangle" function, open the "Functions" category
            and pull out a "draw a triangle" block.
          {/msg}
        </li>
        // These errors are shown if there is no longer a definition for
        // "draw a triangle".
        <li id="defineDrawATriangleError1" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefErrorMsg1" desc="TODO"}
            Oops.  It looks like you no longer have a block to tell the
            turtle how to draw a triangle.  Try reloading the page.
          {/msg}
        </li>
        <li id="defineDrawATriangleError2" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefErrorMsg2" desc="TODO"}
            Reload the page to get back the "to draw a triangle" block.
          {/msg}
        </li>
        <li id="defineAnythingError1" class="feedback" style="display: none">
          {msg meaning="Turtle.defineAnythingErrorMsg1" desc="TODO"}
            You need to create a function.
          {/msg}
        </li>
        <li id="defineAnythingError2" class="feedback" style="display: none">
          {msg meaning="Turtle.defineAnythingErrorMsg2" desc="TODO"}
            Open the Functions category, and pull out a "do something" block,
            and fill it in.
          {/msg}
        </li>
        <li id="defineDrawAHouseError1" class="feedback" style="display: none">
          {if $ij.page == 3}
            {if $ij.level == 5}
              {msg meaning="Turtle.defineDrawAHouseErrorMsg1-l5" desc="TODO"}
                The function you create must be named "draw a house".
              {/msg}
            {elseif $ij.level == 7}
              {msg meaning="Turtle.defineDrawAHouseErrorMsg1-l7" desc="TODO"}
                Oops.  You seem to have deleted or renamed the provided
                "draw a house" function.  Reload the page to get it back.
              {/msg}
            {/if}
          {/if}
        </li>
        {if $ij.page == 3 and $ij.level == 5}
          <li id="defineDrawAHouseError2" class="feedback" style="display: none">
            {msg meaning="Turtle.defineDrawAHouseErrorMsg2" desc="TODO"}
              Put "draw a house" in the light purple area of the "to do something"
              block you dragged out.
            {/msg}
          </li>
        {/if}
        <li id="callDrawAHouseError1" class="feedback" style="display:none">
          {msg meaning="Turtle.drawAHouseError1Msg" desc="TODO"}
            Now that you created a "draw a house" function, you need to call it.
          {/msg}
        </li>
        <li id="callDrawAHouseError2" class="feedback" style="display:none">
          {msg meaning="Turtle.drawAHouseError2Msg" desc="TODO"}
            Open the Functions category, and pull out a "draw a house" block.
          {/msg}
        </li>
        <li id="callDrawAHouseWithParameterError1" class="feedback" style="display:none">
          {msg meaning="Turtle.drawAHouseWithParameterError1Msg" desc="TODO"}
            You need to provide an input when you use the "draw a house" block.
          {/msg}
        </li>
        <li id="callDrawAHouseWithParameterError2" class="feedback" style="display:none">
          {msg meaning="Turtle.drawAHouseWithParameterError2Msg" desc="TODO"}
            Open the "Math" block, pull out a number block, and add the block
            to your "draw a house" block.  Don't forget to change the value from 0.
          {/msg}
        </li>
        <li id="defineDrawATriangleWithParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefWithParameterErrorMsg1" desc="TODO"}
            You need to add a "length" input to your function definition.
            The first step is clicking on the blue
            "+" next to "to draw a triangle".
          {/msg}
        </li>
        <li id="defineDrawATriangleWithParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefWithParameterErrorMsg2" desc="TODO"}
            Your "draw a triangle" function needs a "length" input.
            Click on the blue "+" next to "to draw a triangle", drag in
            an input, and name it "length".
          {/msg}
        </li>
        <li id="defineDrawATriangleWithLengthParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefWithLengthParameterErrorMsg1" desc="TODO"}
            You added an input to "draw a triangle".  Now you need to change its
            name to "length".
          {/msg}
        </li>
        <li id="defineDrawATriangleWithLengthParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleDefWithLengthParameterErrorMsg2" desc="TODO"}
            Click on the blue "+" next to "to draw a triangle" and change the
            name of the input to "length".
          {/msg}
        </li>
        <li id="defineDrawAHouseWithParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.houseDefWithParameterErrorMsg1" desc="TODO"}
            You need to add a "height" input to your function definition.
            The first step is clicking on the blue
            "+" next to "to draw a house".
          {/msg}
        </li>
        <li id="defineDrawAHouseWithParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.houseDefWithParameterErrorMsg2" desc="TODO"}
            Your "draw a house" function needs a "height" input.
            Click on the blue "+" next to "to draw a house", drag in
            an input, and name it "height".
          {/msg}
        </li>
        <li id="defineDrawAHouseWithHeightParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.houseDefWithHeightParameterErrorMsg1" desc="TODO"}
            You added an input to "draw a house".  Now you need to change its
            name to "height".
          {/msg}
        </li>
        <li id="defineDrawAHouseWithHeightParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.houseDefWithHeightParameterErrorMsg2" desc="TODO"}
            Click on the blue "+" next to "to draw a house" and change the
            name of the input to "height".
          {/msg}
        </li>
        <li id="moveByLengthError1" class="feedback" style="display: none">
          {msg meaning="Turtle.moveByLengthMsg1" desc="TODO"}
            The amount to move forward should depend on the input "length".
          {/msg}
        </li>
        <li id="moveByLengthError2" class="feedback" style="display: none">
          {msg meaning="Turtle.moveByLengthMsg2" desc="TODO"}
            Open the Variables category, and drag a "length" block into
            the "move forward" block.
          {/msg}
        </li>
        <li id="callDrawATriangleWithNumericParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleCallWithNumericParameterErrorMsg1" desc="TODO"}
            When using the "draw a triangle" block, you need to provide an input
            that says how big the triangle should be.
          {/msg}
        </li>
        <li id="callDrawATriangleWithNumericParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleCallWithNumericParameterErrorMsg2" desc="TODO"}
            Open the Math category, and pull out a number block.  Change its
            value and plug it into the "draw a triangle" block to say how big
            the first triangle should be.
          {/msg}
        </li>
        <li id="callDrawASquareWithVariableParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.squareCallWithVariableParameterErrorMsg1" desc="TODO"}
            You need to tell "draw a square" that its length should
            be the height of the house.
          {/msg}
        </li>
        <li id="callDrawASquareWithVariableParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.squareCallWithParameterErrorMsg2" desc="TODO"}
            The "length" input to "draw a square" should be the "height" variable.
          {/msg}
        </li>
        <li id="callDrawATriangleWithVariableParameterError1" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleCallWithVariableParameterErrorMsg1" desc="TODO"}
            The "length" input to the "draw a triangle" block within
            "to draw a house" should depend on the height of the house.
          {/msg}
        </li>
        <li id="callDrawATriangleWithNumericParameterError2" class="feedback" style="display: none">
          {msg meaning="Turtle.triangleCallWithParameterErrorMsg2" desc="TODO"}
            The "length" input to "draw a triangle" should be the "height" variable.
          {/msg}
        </li>

        // Errors based on colours used.
        <li id="colourFeedback" class="feedback" style="display: none"></li>

        // Messages relating to the number of blocks.
        <li id="emptyBlocksError" class="feedback" style="display: none">
          {msg meaning="BlocklyApps.emptyBlocksErrorMsg" desc="alert - This
            error message is displayed when the user has added blocks with
            nothing nested inside them (e.g. repeat or if blocks)."}Remove
            unused empty blocks.{/msg}</li>
        <li id="tooFewBlocksError" class="feedback" style="display: none">
          {msg meaning="Turtle.tooFewBlocksMsg" desc="alert - The user has not
            completed the level, is using all of the necessary types of blocks,
            but needs more of these types of blocks to complete the level."}You
            are using all of the necessary types of blocks, but you'll need
            more blocks to complete this level.{/msg}</li>
        <li id="tooManyBlocksError" class="feedback" style="display: none"></li>

        // Most general feedback.
        <li id="levelIncompleteError" class="feedback" style="display: none">
          {msg meaning="Turtle.levelIncompleteError" desc="TODO"}
            You are using all of the necessary types of blocks but not in
            the right way.{/msg}</li>
    </div>
    <div style="text-align: center">
      <button id="tryAgainButton" class="launch" style="display: none"
        onclick="BlocklyApps.displayInterstitialOrCloseModalDialog(false);">
        {msg meaning="Turtle.tryAgain" desc="button - Closes the dialog and
          stays on the current level"}Try again{/msg}
      </button>
      <button id="continueButton" class="launch" style="display: none"
        onclick="BlocklyApps.displayInterstitialOrCloseModalDialog(true, {$ij.level}, {$ij.skin});">
          {msg meaning="Turtle.continue" desc="button - Closes the dialog and
            continues to the next level"}Continue{/msg}
      </button>
    </div>
  </div>
{/template}

/**
 * TOOLBOX.
 *
 * PAGE 1
 * ======
 * Within this page, blocks are only added, never taken away.
 *
 * Level 1 [el]: Adds move_inline and turn_right_inline.
 * Level 2 [coloured square]: Adds draw_colour with colour_picker.
 * level 3 [square in three blocks]: Adds controls_repeat.
 * level 4 [triangle] Adds draw_colour with colour_random.
 * Level 5 [overlapping square and triangle (sideways envelope)]
 * Level 6 [envelope]
 * Level 7 [glasses]
 * Level 8 [spikes]
 * Level 9 [circle]
 * Level 10 [free play]: draw_width
 *
 * PAGE 2
 * ======
 * Categories are introduced, with contents of:
 * - Actions
 *   - draw_move with math_number
 *   - draw_turn with math_number
 * - Color
 *   - draw_colour (set colour) with colour_picker
 *   - draw_colour (set colour) with colour_random
 * - Functions (added at level 2)
 *   - [call] draw a square
 *   - [call] draw a snowball (added at level 9)
 * - Loops
 *   - controls_repeat
 *   - controls_for (added at level 6)
 * - Math
 *   - math_number
 * - Variables (added at level 6)
 *   - get counter (added at level 9)
 *   - get height (added at level 7)
 *   - get length (levels 6 and 10)
 * Level 1 [square]
 * Level 2 [square by function call]: add "draw a square"
 * Level 3 [3 squares]
 * Level 4 [36 squares]
 * Level 5 [nested squares without controls_for]
 * Level 6 [nested squares with controls_for]
 * Level 7 [mini-spiral]
 * Level 8 [3 snowmen]: add "draw a snowman"
 * Level 9 [snowman family]
 * Level 10 [free play]
 *
 * PAGE 3
 * ======
 * Categories are used, with contents of:
 * - Actions
 *   - draw_move with math_number
 *   - draw_turn with math_number
 * - Color
 *   - draw_colour (set colour) with colour_picker
 *   - draw_colour (set colour) with colour_random
 * - Functions (Replaced with custom category at level 2)
 *   - [call] draw a circle
 *   - [call] draw a square
 * - Loops
 *   - controls_for
 *   - controls_repeat
 * - Math
 *   - math_number
 * - Variables (added at level 6)
 *   - get counter
 * Variables and functions are manually added until Levels 7 and 8,
 * when the custom categories are used
 * Level 1 [call "draw a square"]
 * Level 2 [create and call "draw a triangle"]
 * Level 3 [use "draw a square" and "draw a triangle" to fence animals]
 * Level 4 [draw a house]
 * Level 5 [create and call "draw a house"]
 * Level 6 [add parameter to "draw a triangle"]
 * Level 7 [add parameter to "draw a house"]
 * Level 8 [modify end location of "create a house"]
 * Level 9 [call "draw a house" with for loop]
 * Level 10 [free play]
 */
{template .toolbox}
  <xml id="toolbox" style="display: none;">
    {if $ij.page == 1}
      <block type="draw_move_inline"></block>">
      <block type="draw_turn_inline{if $ij.level <= 8}_restricted{/if}">
        <title name="VALUE">90</title>
      </block>
      {if $ij.level >= 2}
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 4}   // Out of numeric order to make colour blocks adjacent.
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      {/if}
      {if $ij.level >= 3}
        <block type="controls_repeat">
          <title name="TIMES">4</title>
        </block>
      {/if}
      {if $ij.level == 10}
        <block type="draw_width" inline="false" x="158" y="67">
          <value name="WIDTH">
            <block type="math_number">
              <title name="NUM">1</title>
            </block>
          </value>
        </block>
      {/if}
    {elseif $ij.page == 2 or $ij.page == 3}
      // Actions: draw_move, draw_turn.
      <category name="{msg meaning="Turtle.catTurtle" desc="TODO"}Actions{/msg}">
        <block type="draw_move">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">100</title>
            </block>
          </value>
        </block>
        {if $ij.page == 2 and $ij.level >= 8}
          <block type="jump">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">50</title>
              </block>
            </value>
          </block>
        {/if}
        <block type="draw_turn">
          <value name="VALUE">
            <block type="math_number">
              <title name="NUM">90</title>
            </block>
          </value>
        </block>
      </category>
      // Colour: draw_colour with colour_picker and colour_random.
      <category name="{msg meaning="Turtle.catColour" desc="TODO"}Color{/msg}">
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_picker"></block>
          </value>
        </block>
        <block type="draw_colour">
          <value name="COLOUR">
            <block type="colour_random"></block>
          </value>
        </block>
      </category>
      // Functions differ depending on page and level.
      {if $ij.page == 2 and $ij.level >= 2}
        <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}">
          <block type="draw_a_square" inline="true">
            <value name="VALUE">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
          </block>
          {if $ij.level >= 8}
            <block type="draw_a_snowman" inline="true">
              <value name="VALUE">
                <block type="math_number">
                  <title name="NUM">100</title>
                </block>
              </value>
            </block>
          {/if}
        </category>
      {elseif $ij.page == 3}
        {if $ij.level == 1}
          // Don't use custom category yet, since it allows function definition.
          <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}">
            <block type="procedures_callnoreturn">
              <mutation name="draw a circle"></mutation>
            </block>
            <block type="procedures_callnoreturn">
              <mutation name="draw a square"></mutation>
            </block>
          </category>
        {else}
          <category name="{msg meaning="Turtle.catProcedures" desc="TODO"}Functions{/msg}" custom="PROCEDURE"></category>
        {/if}
      {/if}
      // Control: controls_for_counter (from page 2, level 5) and repeat.
      <category name="{msg meaning="Turtle.catControl" desc="TODO"}Loops{/msg}">
        {if ($ij.page == 2 and $ij.level >= 5) or ($ij.page == 3 and $ij.level >= 9)}
          <block type="controls_for_counter">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">1</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
            </value>
            <value name="BY">
              <block type="math_number">
                <title name="NUM">10</title>
              </block>
            </value>
          </block>
        {/if}
        <block type="controls_repeat">
          <title name="TIMES">4</title>
        </block>
      </category>
      // Math: Just number blocks until final level.
      <category name="{msg meaning="Turtle.catMath" desc="TODO"}Math{/msg}">
        <block type="math_number"></block>
        {if $ij.level == 10}
          <block type="math_arithmetic" inline="true"></block>
          <block type="math_random_int">
            <value name="FROM">
              <block type="math_number">
                <title name="NUM">1</title>
              </block>
            </value>
            <value name="TO">
              <block type="math_number">
                <title name="NUM">100</title>
              </block>
          </value>
        </block>
        <block type="math_random_float"></block>
      {/if}
      </category>
      // Variables depends on page and level, although we never use the custom category
      // because we want to offer simplified getters and no setters.
      {if $ij.page == 2 and $ij.level >= 6}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          <block type="variables_get_counter"></block>
        </category>
      {elseif $ij.page == 3 and $ij.level >= 6}
        <category name="{msg meaning="Turtle.catVariables" desc="TODO"}Variables{/msg}">
          {if $ij.level >= 9}
            <block type="variables_get_counter"></block>
          {/if}
          {if $ij.level >= 7}
            <block type="variables_get_height"></block>
          {/if}
          {if $ij.level == 6 or $ij.level == 10}
            <block type="variables_get_length"></block>
          {/if}
        </category>
      {/if}
    {/if}
  </xml>
{/template}
