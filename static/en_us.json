{
    "@metadata": {
        "author": "Ellen Spertus <ellen.spertus@gmail.com>",
        "lastupdated": "2013-08-29 11:53:27.064717",
        "locale": "en_us",
        "messagedocumentation" : "qqq"
    },
    "Apps.subtitle": "a visual programming environment",
    "Apps.blocklyMessage": "Blockly",
    "Apps.codeTooltip": "See generated JavaScript code.",
    "Apps.linkTooltip": "Save and link to blocks.",
    "Apps.runTooltip": "Run the program defined by the blocks in the workspace.",
    "Apps.runProgram": "Run Program",
    "Apps.resetProgram": "Reset",
    "Apps.dialogOk": "OK",
    "Apps.dialogCancel": "Cancel",
    "Apps.catLogic": "Logic",
    "Apps.catLoops": "Loops",
    "Apps.catMath": "Math",
    "Apps.catText": "Text",
    "Apps.catLists": "Lists",
    "Apps.catColour": "Colour",
    "Apps.catVariables": "Variables",
    "Apps.catProcedures": "Procedures",
    "Apps.httpRequestError": "There was a problem with the request.",
    "Apps.linkAlert": "Share your blocks with this link:\n\n%1",
    "Apps.hashError": "Sorry, '%1' doesn't correspond with any saved program.",
    "Apps.xmlError": "Could not load your saved file.  Perhaps it was created with a different version of Blockly?",
    "Apps.listVariable": "list",
    "Apps.textVariable": "text",
    "Bird.hungry": "hungry",
    "Bird.heading": "heading",
    "Bird.doIf": "if",
    "Bird.doCode": "do",
    "Bird.elseCode": "else",
    "Bird.hungryTooltip": "The condition when the bird has not gotten the food.",
    "Bird.headingTooltip": "Move in the direction of the given angle: 0 is to the right, 90 is straight up, etc.",
    "Bird.positionTooltip": "x and y mark the bird's position. When x = 0 the bird is near the left edge, when x = 100 it's near the right edge. When y = 0 the bird is at the bottom, when y = 100 it's at the top.",
    "Bird.nextLevel": "Congratulations! Are you ready to proceed to level %1?",
    "Bird.finalLevel": "Congratulations! You have solved the final level.",
    "Bird.bird": "Bird",
    "Bird.runTooltip": "Makes the player do what the blocks say.",
    "Bird.resetTooltip": "Put the player back at the start of the level.",
    "Maze.moveForward": "move forward",
    "Maze.turnLeft": "turn left",
    "Maze.turnRight": "turn right",
    "Maze.doCode": "do",
    "Maze.elseCode": "else",
    "Maze.pathAhead": "if path ahead",
    "Maze.pathLeft": "if path to the left",
    "Maze.pathRight": "if path to the right",
    "Maze.repeatUntil": "repeat until",
    "Maze.moveForwardTooltip": "Move me forward one space.",
    "Maze.q3wrong": "No - Try tracking my direction while following the program.",
    "Maze.q3right": "That's right! Good job.",
    "Maze.q5wrong": "No - Try tracking my direction while following the program.",
    "Maze.q5right": "That's right! Good job.",
    "Maze.q10wrong": "No - Try tracking my direction while following the program.",
    "Maze.q10right": "That's right! Good job.",
    "Maze.turnTooltip": "Turns me left or right by 90 degrees.",
    "Maze.ifTooltip": "If there is a path in the specified direction, then do some actions.",
    "Maze.ifelseTooltip": "If there is a path in the specified direction, then do the first block of actions. Otherwise, do the second block of actions.",
    "Maze.whileTooltip": "Repeat the enclosed actions until finish point is reached.",
    "Maze.capacity0": "You have<x id='START_SPAN'/>0<x id='END_SPAN'/> blocks left.",
    "Maze.capacity1": "You have <x id='START_SPAN'/>1<x id='END_SPAN'/> block left.",
    "Maze.capacity2": "You have <x id='START_SPAN'/>%1<x id='END_SPAN'/> blocks left.",
    "Maze.nextLevel": "Congratulations! You have completed this level.",
    "Maze.finalLevel": "Congratulations! You have solved the final level.",
    "Maze.oneTopBlock": "On this level, you need to stack together all of the blocks in the white workspace.",
    "Maze.numBlocksNeeded": "This level can be solved with %1 blocks.",
    "Apps.projectMessage": "CS First",
    "Maze.maze": "Maze",
    "Maze.hintTitle": "Hint:",
    "Maze.finalLevelMsg": "Congratulations! You have solved the final level.",
    "BlocklyApps.emptyBlocksErrorMsg": "Remove unused empty blocks.",
    "Maze.tooManyBlocksMsg": "This level can be solved with <x id='START_SPAN'/><x id='END_SPAN'/> blocks.",
    "Maze.tooFewBlocksMsg": "You are using all of the necessary types of blocks, but try using more of these types of blocks to complete this level.",
    "Maze.levelIncompleteError": "You are using all of the necessary types of blocks but not in the right way.",
    "BlocklyApps.moveForwardError1Msg-1": "The 'move forward' block moves one space forward.",
    "BlocklyApps.moveForwardError2Msg-1": "Drag a 'move forward' block from the toolbox to the workspace.",
    "BlocklyApps.moveForwardError1Msg-2": "The 'move forward' block moves one space forward.",
    "BlocklyApps.moveForwardError2Msg-2": "Drag a 'move forward' block from the toolbox to the workspace.",
    "Maze.turnLeftError1Msg-2": "Use the 'turn left' block when I need to turn to the left.",
    "Maze.turnLeftError2Msg-2": "Drag and snap the 'turn left' block under a 'move forward' block when I need to turn to the left.",
    "Maze.turnRightError1Msg-2": "Use the 'turn right' block when I need to turn to the right.",
    "Maze.turnRightError2Msg-2": "Drag and snap the 'turn right' block under a 'move forward' block when I need to turn to the right.",
    "BlocklyApps.moveForwardError1Msg-3": "The 'move forward' block moves one block forward.",
    "BlocklyApps.moveForwardError2Msg-3": "Drag a 'move forward' block from the toolbox to the workspace.",
    "Maze.whileError1Msg-3": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-3": "Drag and snap the 'repeat' block around the 'move forward' block.",
    "BlocklyApps.moveForwardError1Msg-4": "The 'move forward' block moves one block forward.",
    "BlocklyApps.moveForwardError2Msg-4": "Drag and snap a 'move forward' block below a 'turn' block so I can move in the new direction.",
    "Maze.turnError1Msg-4": "Use both a 'turn left' and a 'turn right' block on this level.",
    "Maze.turnError2Msg-4": "Drag and snap a 'turn' block under a 'move forward' block when I need to change directions.",
    "Maze.whileError1Msg-4": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-4": "Drag and snap the 'repeat' block around the other blocks.",
    "BlocklyApps.moveForwardError1Msg-5": "The 'move forward' block moves one block forward.",
    "BlocklyApps.moveForwardError2Msg-5": "Drag and snap a 'move forward' block below a 'turn' block so I can move in the new direction.",
    "Maze.turnError1Msg-5": "Use the 'turn left' block when I need to turn to the left.",
    "Maze.turnError2Msg-5": "Drag and snap the 'turn left' block inside an 'if' block.",
    "Maze.whileError1Msg-5": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-5": "Drag and snap the 'repeat' block around the other blocks.",
    "Maze.ifError1Msg-5": "Use the if block to turn left if there is a path to the left.",
    "Maze.ifError2Msg-5": "Place a turn left block inside the 'if' block to turn left if there is a path to the left.",
    "BlocklyApps.moveForwardError1Msg-7": "The 'move forward' block moves one block forward.",
    "BlocklyApps.moveForwardError2Msg-7": "Drag and snap a 'move forward' block below a turn block so I can move in the new direction.",
    "Maze.turnError1Msg-7": "Use the 'turn right' block when I need to turn to the right.",
    "Maze.turnError2Msg-7": "Drag and snap the 'turn right' block inside an 'if' block.",
    "Maze.whileError1Msg-7": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-7": "Drag and snap the 'repeat' block around the other blocks.",
    "Maze.ifPathLeftError1Msg-8": "Use the 'if' block to turn left if there is a path to the left.",
    "Maze.ifPathLeftError2Msg-8": "Place a 'turn left' block inside the 'if' block to turn left if there is a path to the left.",
    "Maze.ifPathRightError1Msg-8": "Use the 'if' block to turn right if there is a path to the right.",
    "Maze.ifPathRightError2Msg-8": "Place a 'turn right' block inside the 'if' block to turn right if there is a path to the right.",
    "Maze.turnLeftError1Msg-9": "Use the 'turn left' block when I need to turn to the left.",
    "Maze.turnLeftError2Msg-9": "Drag and snap the 'turn left' block inside the 'if-else' block.",
    "Maze.elseError1Msg-9": "An 'if-else' block will run the else statement when the if statement is not true.&quot;",
    "Maze.elseError2Msg-9": "An 'if-else' block will run the else statement when the if statement is not true.&quot;",
    "Maze.ifError1Msg-9": "Use an 'if-else' block to go straight if there is a path ahead and turn if there is no path ahead.",
    "Maze.ifError2Msg-9": "Use an 'if-else' block to go straight if there is a path ahead and turn if there is no path ahead.",
    "Maze.whileError1Msg-9": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-9": "Drag and snap the 'repeat' block around all of your blocks.",
    "Maze.ifError1Msg-10": "Use an 'if-else' block to go straight if there is a path ahead and turn if there is no path ahead.",
    "Maze.ifError2Msg-10": "Use an 'if-else' block to go straight if there is a path ahead and turn if there is no path ahead.",
    "Maze.elseError1Msg-10": "An 'if-else' block will run the else statement when the if statement is not true.&quot;",
    "Maze.elseError2Msg-10": "An 'if-else' block will run the else statement when the 'if' statement is not true.",
    "Maze.whileError1Msg-10": "Notice the repetition in the path? Try using the 'repeat' block which repeats the sequence of blocks inside it until, the player reaches the finish.",
    "Maze.whileError2Msg-10": "Drag and snap the 'repeat' block around all of your blocks.",
    "Maze.reinfMsg2": "A repeat block repeats the blocks inside it until I reach the red marker.",
    "Maze.reinfMsg3": "Which direction am I facing after this program ends?",
    "Maze.reinfMsg4": "Here is an if block: I will turn left if there is a path to the left.",
    "Maze.reinfMsg5": "We can place 'if' blocks inside 'repeat' blocks. Where am I when this program ends? Click on the correct picture below.",
    "Maze.reinfMsg6": "Repeat blocks allow me to do an action multiple times without additional blocks. 'if' blocks allow me to do an action based on my surroundings.",
    "Maze.reinfMsg8": "Here is an 'if-else' block: I move forward if there is a path ahead, but I turn left if not.",
    "Maze.reinfMsg9": "Will the blocks below move me to the red marker?",
    "Maze.dirN": "N",
    "Maze.dirE": "E",
    "Maze.dirS": "S",
    "Maze.dirW": "W",
    "Maze.yes": "Yes",
    "Maze.no": "No",
    "Maze.tryAgain": "Try again",
    "Maze.continue": "Continue",
    "Maze.instructions1": "A program is a sequence of statements. Stack a couple of 'move forward' blocks together to help me reach the goal.",
    "Maze.instructions2": "What should I do to follow the path?",
    "Maze.instructions3": "Computers have limited memory. Reach the end of this path using only two blocks.",
    "Maze.instructions4": "Reach the goal using only five blocks.",
    "Maze.instructions5": "I will have to turn left when I cannot go straight. Use an 'if' block to see if their is a path in another direction.",
    "Maze.instructions6": "An 'if' condition will do something only if the condition is true.  Try turning left if there is a path to the left.",
    "Maze.instructions7": "A small change to the blocks from the previous maze will solve this level.",
    "Maze.instructions8": "You can use more than one 'if' statement.",
    "Maze.instructions9": "If-else blocks will do one thing or the other.",
    "Maze.instructions10": "Use the 'if-else' block to help me get out of the maze!",
    "Maze.codeTooltip": "See generated JavaScript code.",
    "Maze.linkTooltip": "Save and link to blocks.",
    "Maze.runProgram": "Run",
    "Maze.resetProgram": "Reset",
    "Turtle.colourTooltip": "Changes the color of the pen.",
    "Turtle.degrees": "degrees",
    "Turtle.hideTurtle": "hide turtle",
    "Turtle.moveBackward": "move backward by",
    "Turtle.moveForward": "move forward by",
    "Turtle.moveForwardTooltip": "Moves the turtle forward.",
    "Turtle.jumpBackward": "jump backward by",
    "Turtle.jumpForward": "jump forward by",
    "Turtle.jumpForwardTooltip": "Moves the turtle forward without leaving any marks.",
    "Turtle.moveTooltip": "Moves the turtle forward or backward by the specified amount.",
    "Turtle.penDown": "pen down",
    "Turtle.penTooltip": "Lifts or lowers the pen, to start or stop drawing.",
    "Turtle.penUp": "pen up",
    "Turtle.dots": "dots",
    "Turtle.setColour": "set color",
    "Turtle.setWidth": "set width",
    "Turtle.showTurtle": "show turtle",
    "Turtle.turnLeft": "turn left by",
    "Turtle.turnRightTooltip": "Turns the turtle right by the specified angle.",
    "Turtle.turnRight": "turn right by",
    "Turtle.turnTooltip": "Turns the turtle left or right by the specified number of degrees.",
    "Turtle.turtleVisibilityTooltip": "Makes the turtle (green circle and arrow) visible or invisible.",
    "Turtle.widthTooltip": "Changes the width of the pen.",
    "Turtle.loopVariable": "counter",
    "Turtle.blocksUsed": "Blocks used: %1",
    "Turtle.drawAHouseNotDefined8": "You need to complete level 7 before doing this level.",
    "Turtle.drawAHouseNotDefined9": "You need to complete levels 7 and 8 before doing this level.",
    "Turtle.notBlackColour": "You need to set a color other than black for this level.",
    "Turtle.tooFewColours": "You need to use at least %1 different colors on this level.  You used only %2.",
    "Turtle.wrongColour": "Your picture is the wrong color.  For this level, it needs to be %1.",
    "Turtle.extraColours": "You used extra colors.  Nice!",
    "Turtle.drawASquare": "draw a square",
    "Turtle.lengthParameter": "length",
    "Turtle.drawASnowman": "draw a snowman",
    "Turtle.heightParameter": "height",
    "Turtle.title": "CS First: Turtle Graphics %1",
    "Turtle.numBlocksNeeded": "This level can be solved with %1 blocks.  You used %2.",
    "Turtle.rightAnswer": "You got it!",
    "Turtle.wrongAnswer": "Wrong!  Try again.",
    "Turtle.showMe": "Show me",
    "Turtle.gotoNext": "Continue",
    "Turtle.instructions1_1": "I'm a turtle with chalk on my belly. Stack up blocks and press &quot;Run Program&quot; to make me draw the shown picture.",
    "Turtle.instructions1_2": "Draw a square, making each side a different color.",
    "Turtle.instructions1_3": "Make a square using only 3 blocks.  (Remember that blocks to set color are free.)",
    "Turtle.instructions1_4": "Draw a triangle whose sides are all 100 dots and are in random colors.  You'll have to figure out how far to turn.",
    "Turtle.instructions1_5": "Draw a triangle and then a square to draw an envelope.",
    "Turtle.instructions1_6": "Can you figure out how draw this triangle and square?",
    "Turtle.instructions1_7": "See if you can draw these green glasses.",
    "Turtle.instructions1_8": "After trying out these blocks, see what happens if you make them repeat 8 times.  It should look a little different every time you run it.",
    "Turtle.instructions1_9": "Figure out what number to replace the question marks with to draw a circle.",
    "Turtle.instructions1_10": "Draw anything you want. Some ideas are a stick figure, snowflake, or spiral.  You could also try out the new &quot;set width&quot; block.  Have fun!",
    "Turtle.instructions2_1": "Find the familiar blocks in the new categories to draw a square in your favorite color.",
    "Turtle.instructions2_2": "Use the new &quot;draw a square&quot; block, found in the &quot;Functions&quot; category, to draw a small green square.",
    "Turtle.instructions2_3": "Use the &quot;repeat&quot; block to draw 3 squares of size 100, each 120 degrees apart, in random colors.",
    "Turtle.instructions2_4": "Now change the code to draw 36 squares, each 10 degrees apart.",
    "Turtle.instructions2_5": "Draw squares with sides of 50, 60, 70, 80, and 90 dots.  You'll need lots of blocks.",
    "Turtle.instructions2_6": "Modify this program with the &quot;counter&quot; block (found in the Variables category) to draw the same series of squares with fewer blocks than on the previous level.",
    "Turtle.instructions2_7": "Replace the pale (disabled) blocks with a &quot;count with&quot; block (in the Loops category) and &quot;counter&quot; block (in the Variables category) to draw the same spiral.",
    "Turtle.instructions2_8": "Draw three snowmen 150 dots tall in different colors, 100 dots apart.  Use the new &quot;draw a snowman&quot; function and &quot;jump forward&quot; block.",
    "Turtle.instructions2_9": "Use a &quot;count with&quot; loop to draw a family of snowmen with heights of 110, 100, 90, 80, and 70 dots, each 60 dots apart.",
    "Turtle.instructions2_10": "Draw whatever you want.  One idea is experimenting with different types of spirals.  What happens if you change the turn amount, rather than the move amount?  TODO: Add starting blocks.",
    "Turtle.instructions3_1": "You can now see how the &quot;draw a square&quot; and &quot;draw a circle&quot; functions are defined.  Defining a function doesn't run its blocks.  You have to pull out the &quot;draw a square&quot; block to actually draw a square.",
    "Turtle.instructions3_2": "Using the &quot;draw a square&quot; function as an example, create a &quot;draw a triangle&quot; function and use it.",
    "Turtle.instructions3_3": "Draw triangular fences around the cats and a square fence around the cow.  Tip: Test the program as you go along.",
    "Turtle.instructions3_4": "See if you can figure out how to use &quot;draw a square&quot; and &quot;draw a triangle&quot; (and some other blocks) to draw a house around the lion.",
    "Turtle.instructions3_5": "Now create a &quot;draw a house&quot; function and use it house two cats.",
    "Turtle.instructions3_6": "Using &quot;draw a square&quot; as an example, add an input named &quot;length&quot; to &quot;draw a triangle&quot;.  Then, draw triangles in different colors around the animals.",
    "Turtle.instructions3_7": "Add a &quot;height&quot; input to &quot;draw a house&quot; and build a big house for the elephant.",
    "Turtle.instructions3_8": "Here are all of the blocks from the previous level.  Modify &quot;draw a house&quot; so the turtle ends up at the bottom right corner of the new house.  Use this modified function to house all the animals.",
    "Turtle.instructions3_9": "Use a &quot;count with&quot; block and your code from the previous level to draw houses of size 50, 100, and 150 in different colors.",
    "Turtle.instructions3_10": "You're now free to do whatever you want.  One idea is to try running this program with different turn amounts (higher or lower than 90).  Other ideas are to draw a star, circle, heart, or animal.",
    "Turtle.turtle1": "Turtle 1",
    "Turtle.turtle2": "Turtle 2",
    "Turtle.turtle3": "Turtle 3",
    "Turtle.runProgram": "Run",
    "Turtle.resetProgram": "Reset",
    "Turtle.codeTooltip": "See generated JavaScript code.",
    "Turtle.hintTitle": "Hint:",
    "Turtle.nextLevel": "Congratulations! You have completed this level.",
    "Turtle.finalLevelMsg": "Congratulations! You have solved the final level.",
    "BlocklyApps.moveForwardError1Msg": "You'll need to move me forward in order to draw anything.",
    "BlocklyApps.moveForwardError2Msg": "You need to use the &quot;move forward&quot; block.",
    "BlocklyApps.moveError1Msg": "You'll need to move me in order to draw anything.",
    "BlocklyApps.moveError2Msg": "You need to use the &quot;move&quot; block.",
    "Turtle.moveForwardError1Msg": "I'll need to turn in order to draw this picture.",
    "Turtle.moveForwardError2Msg": "I'll need to turn right by 90 degrees to draw this picture.",
    "Turtle.turnError1Msg": "I'll need to turn in order to draw this picture.",
    "Turtle.turnError2Msg": "Use a &quot;turn&quot; block.",
    "Turtle.repeatError1Msg": "The &quot;repeat&quot; block saves you from having to repeat yourself.",
    "Turtle.repeatError2Msg": "You need to use a &quot;repeat&quot; block.",
    "Turtle.colour_randomError1Msg": "The &quot;set color&quot; and &quot;random color&quot; blocks give you random (unpredictable) colors.",
    "Turtle.colour_randomError2Msg": "Pull out the &quot;set color&quot; block that contains a &quot;random color&quot; block, and put it in the appropriate place.",
    "Turtle.drawColourError1Msg": "To change the color I draw, use the &quot;set color&quot; block.",
    "Turtle.drawColourError2Msg": "Each &quot;set color&quot; block sets the color of everything I draw after it until the next &quot;set color&quot; block.",
    "Turtle.forError1Msg-p2-l6": "Reload this level to get the &quot;count with&quot; block back.",
    "Turtle.forError1Msg-p2-l7": "You need a &quot;count with&quot; block to give the counter values from 25 through 60.",
    "Turtle.forError1Msg-p2-l9": "You need a &quot;count with&quot; block to give the counter values from 110 down to 70.",
    "Turtle.forError1Msg-p3-l9": "You need to use a &quot;count with&quot; block on this level.",
    "Turtle.forError2Msg-p2-l7": "Open the Loops category, and drag out a &quot;count with&quot; block.",
    "Turtle.forError2Msg-p2-l9": "Open the Loops category, and drag out a &quot;count with&quot; block. Have it count from 110 to 70 by 10.",
    "Turtle.forError2Msg-p3-l9": "You need to open the &quot;Loops&quot; drawer and pull out a &quot;count with&quot; block to count from 50 to 150 by 50s.",
    "Turtle.getCounterError1Msg-p2-l6": "You need the &quot;counter&quot; block to draw squares of different lengths.",
    "Turtle.getCounterError1Msg-p2-l7": "You need the &quot;counter&quot; block to draw lines of different lengths.",
    "Turtle.getCounterError1Msg-p2-l9": "You need the &quot;counter&quot; block to draw snowmen of different heights.",
    "Turtle.getCounterError1Msg-p3": "You need the &quot;counter&quot; block to draw houses of different heights.",
    "Turtle.getCounterError2Msg-p2-l6": "From the &quot;Variables&quot; category, get the &quot;counter&quot; block, and use it as the &quot;length&quot; input to &quot;draw a square&quot;.",
    "Turtle.getCounterError2Msg-p2-l7": "From the &quot;Variables&quot; category, get the &quot;counter&quot; block, and use it as the input to the &quot;move forward&quot; block.",
    "Turtle.getCounterError2Msg-p2-l9": "From the &quot;Variables&quot; category, get the &quot;counter&quot; block, and use it as the input to the &quot;draw a snowman&quot; block.",
    "Turtle.getCounterError2Msg-p3": "From the &quot;Variables&quot; category, get the &quot;counter&quot; block, and use it as the input to the &quot;draw a house&quot; block.",
    "Turtle.draw_a_snowmanError1Msg": "You need to use the &quot;draw a snowman&quot; block.",
    "Turtle.draw_a_snowmanError2Msg": "You can get the &quot;draw a snowman&quot; block from the &quot;Functions&quot; category.",
    "Turtle.jumpError1Msg": "The &quot;jump forward&quot; block moves the turtle without drawing anything.",
    "Turtle.jumpError2Msg": "Open the Actions category to Get the &quot;jump forward&quot; block, and use it to move the turtle between each snowman.",
    "Turtle.drawASquareError1Msg-p2": "In this tutorial, to draw a square, use the new &quot;draw a square&quot; function.",
    "Turtle.drawASquareError2Msg-p2": "Open the Functions category and get a &quot;draw a square&quot; block.",
    "Turtle.drawASquareError1Msg-p3": "The shown code tells the turtle <x id='START_EMPHASIS'/>how<x id='END_EMPHASIS'/> to draw a square but not to draw a square.  You need to pull out a &quot;draw a square&quot; block from the Functions category.",
    "Turtle.drawASquareError2Msg-p3": "From the current code, the turtle doesn't know that you want to draw a square. Pull out a &quot;draw a square&quot; block from the Functions category.",
    "Turtle.drawATriangleError1Msg-p3": "You need a &quot;draw a triangle&quot; block to let the turtle know you want it to draw a triangle.",
    "Turtle.drawATriangleError2Msg-p3": "To use your &quot;draw a triangle&quot; function, open the &quot;Functions&quot; category and pull out a &quot;draw a triangle&quot; block.",
    "Turtle.triangleDefErrorMsg1": "Oops.  It looks like you no longer have a block to tell the turtle how to draw a triangle.  Try reloading the page.",
    "Turtle.triangleDefErrorMsg2": "Reload the page to get back the &quot;to draw a triangle&quot; block.",
    "Turtle.defineAnythingErrorMsg1": "You need to create a function.",
    "Turtle.defineAnythingErrorMsg2": "Open the Functions category, and pull out a &quot;do something&quot; block, and fill it in.",
    "Turtle.defineDrawAHouseErrorMsg1-l5": "The function you create must be named &quot;draw a house&quot;.",
    "Turtle.defineDrawAHouseErrorMsg1-l7": "Oops.  You seem to have deleted or renamed the provided &quot;draw a house&quot; function.  Reload the page to get it back.",
    "Turtle.defineDrawAHouseErrorMsg2": "Put &quot;draw a house&quot; in the light purple area of the &quot;to do something&quot; block you dragged out.",
    "Turtle.drawAHouseError1Msg": "Now that you created a &quot;draw a house&quot; function, you need to call it.",
    "Turtle.drawAHouseError2Msg": "Open the Functions category, and pull out a &quot;draw a house&quot; block.",
    "Turtle.drawAHouseWithParameterError1Msg": "You need to provide an input when you use the &quot;draw a house&quot; block.",
    "Turtle.drawAHouseWithParameterError2Msg": "Open the &quot;Math&quot; block, pull out a number block, and add the block to your &quot;draw a house&quot; block.  Don't forget to change the value from 0.",
    "Turtle.triangleDefWithParameterErrorMsg1": "You need to add a &quot;length&quot; input to your function definition. The first step is clicking on the blue &quot;+&quot; next to &quot;to draw a triangle&quot;.",
    "Turtle.triangleDefWithParameterErrorMsg2": "Your &quot;draw a triangle&quot; function needs a &quot;length&quot; input. Click on the blue &quot;+&quot; next to &quot;to draw a triangle&quot;, drag in an input, and name it &quot;length&quot;.",
    "Turtle.triangleDefWithLengthParameterErrorMsg1": "You added an input to &quot;draw a triangle&quot;.  Now you need to change its name to &quot;length&quot;.",
    "Turtle.triangleDefWithLengthParameterErrorMsg2": "Click on the blue &quot;+&quot; next to &quot;to draw a triangle&quot; and change the name of the input to &quot;length&quot;.",
    "Turtle.houseDefWithParameterErrorMsg1": "You need to add a &quot;height&quot; input to your function definition. The first step is clicking on the blue &quot;+&quot; next to &quot;to draw a house&quot;.",
    "Turtle.houseDefWithParameterErrorMsg2": "Your &quot;draw a house&quot; function needs a &quot;height&quot; input. Click on the blue &quot;+&quot; next to &quot;to draw a house&quot;, drag in an input, and name it &quot;height&quot;.",
    "Turtle.houseDefWithHeightParameterErrorMsg1": "You added an input to &quot;draw a house&quot;.  Now you need to change its name to &quot;height&quot;.",
    "Turtle.houseDefWithHeightParameterErrorMsg2": "Click on the blue &quot;+&quot; next to &quot;to draw a house&quot; and change the name of the input to &quot;height&quot;.",
    "Turtle.moveByLengthMsg1": "The amount to move forward should depend on the input &quot;length&quot;.",
    "Turtle.moveByLengthMsg2": "Open the Variables category, and drag a &quot;length&quot; block into the &quot;move forward&quot; block.",
    "Turtle.triangleCallWithNumericParameterErrorMsg1": "When using the &quot;draw a triangle&quot; block, you need to provide an input that says how big the triangle should be.",
    "Turtle.triangleCallWithNumericParameterErrorMsg2": "Open the Math category, and pull out a number block.  Change its value and plug it into the &quot;draw a triangle&quot; block to say how big the first triangle should be.",
    "Turtle.squareCallWithVariableParameterErrorMsg1": "You need to tell &quot;draw a square&quot; that its length should be the height of the house.",
    "Turtle.squareCallWithParameterErrorMsg2": "The &quot;length&quot; input to &quot;draw a square&quot; should be the &quot;height&quot; variable.",
    "Turtle.triangleCallWithVariableParameterErrorMsg1": "The &quot;length&quot; input to the &quot;draw a triangle&quot; block within &quot;to draw a house&quot; should depend on the height of the house.",
    "Turtle.triangleCallWithParameterErrorMsg2": "The &quot;length&quot; input to &quot;draw a triangle&quot; should be the &quot;height&quot; variable.",
    "Turtle.tooFewBlocksMsg": "You are using all of the necessary types of blocks, but you'll need more blocks to complete this level.",
    "Turtle.levelIncompleteError": "You are using all of the necessary types of blocks but not in the right way.",
    "Turtle.tryAgain": "Try again",
    "Turtle.continue": "Continue",
    "Turtle.catTurtle": "Actions",
    "Turtle.catColour": "Color",
    "Turtle.catProcedures": "Functions",
    "Turtle.catControl": "Loops",
    "Turtle.catMath": "Math",
    "Turtle.catVariables": "Variables"
}
