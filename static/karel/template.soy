{namespace mazepage}

/**
 * This is a Closure Template.  Build multilingually:
 *
 * # Create en.js if that's the only language you care about.
 * java -jar ../_soy/SoyToJsSrcCompiler.jar --outputPathFormat generated/en.js --srcs templateLevel2.soy,templateLevel1.soy,template.soy,../common.soy
 *
 * # To fully internationalize, follow these steps...
 * # Extract messages from template.soy.
 * java -jar ../_soy/SoyMsgExtractor.jar --outputFile extracted_msgs.xlf template.soy
 *
 * # Create en.json, qqq.json.
 * ../../i18n/xliff_to_json.py --xlf extracted_msgs.xlf
 *
 * Once translations have been made into <LANG>.json:
 *
 * # Create *.js for each *.json file.  By default, qqq.json and keys.json are skipped.
 * ../../i18n/json_to_js.py --path_to_jar=../_soy *.json
 */

/**
 * Web page structure.
 */
{template .start}
  <div id="start_blocks" style="display:none">
    {call .startBlocks /}
  </div>
  <div id="MSG" style="display: none">
    <span id="moveForward">{msg meaning="Maze.moveForward" desc="verb -
      imperative or infinitive for a person moving (walking) in the direction
      he/she is facing."}move forward{/msg}</span>
    // Nan's
    <span id="putDownBall">{msg meaning="Maze.putDownBall" desc="verb -
      imperative or infinitive for a person putting down a ball."}fill 1{/msg}</span>    
    <span id="putDown5">{msg meaning="Maze.putDown5" desc="place 5 balls on the square."}
      put down 5{/msg}</span>
    <span id="pickUpBall">{msg meaning="Maze.pickUpBall" desc="verb -
      imperative or infinitive for a person picking up a ball."}remove 1{/msg}</span>    
    <span id="while">{msg meaning="Maze.while" desc="condensed form of 'while
      something is true'"}while{/msg}</span>
    <span id="ballsPresent">{msg meaning="Maze.ballsPresent" desc="Indicates
      the presence of at least one ball, as in 'he brought a ball, there
      are now balls present'"}current spot has a mound{/msg}</span>
    <span id="holesPresent">{msg meaning="Maze.holesPresent" desc="Indicates
      the lack of any balls, as in 'she took the last ball, there
      are now no balls present'"}current spot has a hole{/msg}</span>
    <span id="turnLeft">{msg meaning="Maze.turnLeft" desc="verb - imperative
      or infinitive for a person turning his head and body one quarter rotation
      counter-clockwise.  Prefer a translation that has text in common with the
      translation of 'turn right'.  See [[Translating:Blockly#Drop-Down_Menus]]."}
      turn left{/msg}</span>
    <span id="turnRight">{msg meaning="Maze.turnRight" desc="verb - imperative
      or infinitive for a person turning his head and body one quarter rotation
      clockwise. Prefer a translation that has text in common with the
      translation of 'turn left'.  See [[Translating:Blockly#Drop-Down_Menus]]."}
      turn right{/msg}</span>
    <span id="doCode">{msg meaning="Maze.doCode" desc="verb - imperative or
      infinitive preceding one or more commands to a person."}do{/msg}</span>
    <span id="elseCode">{msg meaning="Maze.elseCode" desc="conjunction -
      'otherwise', introducing commands to be performed if a previous condition
      was not true, as in 'if x>3, do this, else do that'."}else{/msg}</span>
    <span id="pathAhead">{msg meaning="Maze.pathAhead" desc="condensed form of
      'if there is a path ahead', as in: 'if path ahead, go forward'."}path ahead{/msg}</span>
    <span id="pathLeft">{msg meaning="Maze.pathLeft" desc="condensed form of 'if
      there is a path to the left', as in: 'if path to the left, turn left'."}path to the left{/msg}</span>
    <span id="pathRight">{msg meaning="Maze.pathRight" desc="condensed form of
      'if there is a path to the right', as in: 'if path to the right, turn
      right'."}path to the right{/msg}</span>
    <span id="noPathAhead">{msg meaning="Maze.noPathAhead" desc="condensed form of
      'if there is a no path ahead', as in: 'if no path ahead, go forward'."}path is blocked{/msg}</span>
    <span id="noPathLeft">{msg meaning="Maze.noPathLeft" desc="condensed form of 'if
      there is a no path to the left', as in: 'if no path to the left, turn left'."}no path to the left{/msg}</span>
    <span id="noPathRight">{msg meaning="Maze.noPathRight" desc="condensed form of
      'if there is a no path to the right', as in: 'if no path to the right, turn
      right'."}no path to the right{/msg}</span>
    <span id="repeatUntilBlocked">{msg meaning="Maze.repeatUntil" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}while path is not blocked{/msg}</span>
    <span id="repeatUntilFinish">{msg meaning="Maze.repeatUntil" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}repeat until finish{/msg}</span>
    <span id="repeatWhileCurrentNotClear">{msg meaning="Maze.repeatUntil" desc="verb -
      imperative or infinitive to repeat the following commands.  The phrase is
      followed by the symbol denoting the end of the maze."}while current spot is uneven{/msg}</span>
    <span id="moveForwardTooltip">{msg meaning="Maze.moveForwardTooltip"
      desc="tooltip (pop-up help) - Pegman is the humanoid icon used in Google Maps.
      See picture at http://goo.gl/9I64i (http://maps.google.com/intl/en/help/maps/streetview/learn/pegman.html).
      The term 'space' refers to a single square within a maze."}Move me forward one space.{/msg}</span>
    <span id="q4wrong">{msg meaning="Maze.q4wrong" desc="tracking is suggesting
      to the user that they should follow each instruction and follow how that
      will affect the movement. A 'program' is a set of instructions that tell
      the computer what to do next."}No - Try tracking my direction while
      following the program.{/msg}</span>
    <span id="q4right">{msg meaning="Maze.q4right" desc="Congratulating the
      user on correctly answering the question."}That's right! Good job.{/msg}</span>
    <span id="q5wrong">{msg meaning="Maze.q5wrong" desc="tracking is suggesting
    to the user that they should follow each instruction and follow how that
    will affect the movement. A 'program' is a set of instructions that tell
    the computer what to do next."}No - Try tracking my direction while following
    the program.{/msg}</span>
    <span id="q5right">{msg meaning="Maze.q5right" desc="Congratulating the user
      on correctly answering the question."}You got it right!{/msg}</span>
    <span id="q10wrong">{msg meaning="Maze.q10wrong" desc="tracking is suggesting
      to the user that they should follow each instruction and follow how that
      will affect the movement. A 'program' is a set of instructions that tell
      the computer what to do next."}No - Try tracking my direction while
      following the program.{/msg}</span>
    <span id="q10right">{msg meaning="Maze.q10right" desc="Congratulating the
      user on correctly answering the question."}That's right!{/msg}</span>
    <span id="turnTooltip">{msg meaning="Maze.turnTooltip" desc="tooltip
      (pop-up help) - Pegman is the humanoid icon used in Google Maps.
      See picture at http://goo.gl/9I64i
      (http://maps.google.com/intl/en/help/maps/streetview/learn/pegman.html).
      The term 'space' refers to a single square within a maze."}Turns me
      left or right by 90 degrees.{/msg}</span>
    <span id="ifTooltip">{msg meaning="Maze.ifTooltip" desc="tooltip
      (pop-up help) - 'path' refers to a path through a maze. "}If there is a
      path in the specified direction, then do some actions.{/msg}</span>
    <span id="ifelseTooltip">{msg meaning="Maze.ifelseTooltip" desc="tooltip
      (pop-up help) - 'path' refers to a path through a maze."}If there is a
      path in the specified direction, then do the first block of actions.
      Otherwise, do the second block of actions.{/msg}</span>
    <span id="whileTooltip">{msg meaning="Maze.whileTooltip" desc="tooltip
      (pop-up help) - Repeat the enclosed commands until the maze has been
      successfully completed (the end point reached)."}Repeat the enclosed
      actions until finish point is reached.{/msg}</span>
    <span id="capacity0">{msg meaning="Maze.capacity0" desc="warning - No more
      blocks may be added until some are removed.  Do not alter the portions
      between pointy brackets (< and >), although you may move them within the
      phrase and replace 0 with one or more words."}You have
      <span id='capacityNumber'>0</span> blocks left.{/msg}</span>
    <span id="capacity1">{msg meaning="Maze.capacity1" desc="warning - Only one
      more block may be added.  Do not alter the portions between pointy brackets
      (< and >), although you may move them within the phrase and replace 1 with
      one or more words."}You have <span id='capacityNumber'>1</span> block left.{/msg}</span>
    <span id="capacity2">{msg meaning="Maze.capacity2" desc="warning - Only %1
      more blocks may be used, where %1 is an integer greater than 1.  Do not
      alter the portions between pointy brackets (< and >), although you may
      move them within the phrase."}You have <span id='capacityNumber'>%1</span> blocks left.{/msg}</span>
    <span id="nextLevel">{msg meaning="Maze.nextLevel" desc="alert - This is
      displayed when the user solves the maze, inviting them to precede to the
      next level of difficulty."}
      Congratulations! You have completed this level.{/msg}</span>
    <span id="finalLevel">{msg meaning="Maze.finalLevel" desc="alert - This is
      displayed when the user solves the most difficult level."}
      Congratulations! You have solved the final level.{/msg}</span>
    <span id="oneTopBlock">{msg meaning="Maze.oneTopBlock" desc="alert - This is
      displayed if a user attempts to run a program composed of multiple stacks
      of blocks, letting them know they need to create a single stack."}On this
      level, you need to stack together all of the blocks in the white workspace.{/msg}</span>
    <span id="putdownTower">{msg meaning="Maze.putdownTower" desc="Place a tower on the ground"}
      put down tower{/msg}</span>
    <span id="pickupTower">{msg meaning="Maze.pickupTower" desc="Place a tower up off the ground"}
      pickup tower{/msg}</span>
  </div>

  // Common messages follow.  They are inlined here and in the other
  // apps/*/template.soy files instead of being shared in the parent directory
  // in order to avoid:
  // - loading an additional file over the network.
  // - keeping track of which languages have translated common messages.
  // Messages in the other apps' template.soy files reference these to
  // minimize extra work for translators.
  <div id="COMMON_MSG" style="display: none">
    <span id="httpRequestError">{msg meaning="Apps.httpRequestError" desc="alert - The URL is invalid or a server error occurred.  This message will be followed by technical information useful to engineers trying to understand the problem."}There was a problem with the request.{/msg}</span>
    <span id="linkAlert">{msg meaning="Apps.linkAlert" desc="alert - After the user has pressed a button to save his/her program, this provides the URL (%1) to retrieve the program.  The characters '\n\n' indicate that a blank line will be displayed before the URL (in English).  Leave those in unless you move %1 to the beginning or middle of the text, in which case you should use your judgment about where blank lines would be most useful."}Share your blocks with this link:\n\n%1{/msg}</span>
    <span id="hashError">{{msg meaning="Apps.hashError" desc="alert - A request to retrieve a stored program does not have a valid URL. %1 is the invalid portion of the URL. 'Blockly' is the name of the system.  It should be left untranslated or it should be transliterated.  See [[Translating:Blockly#Special_terms]]."}}Sorry, '%1' doesn't correspond with any saved Blockly file.{{/msg}}</span>
    <span id="xmlError">{msg meaning="Apps.xmlError" desc="alert - There was a problem loading a file previously saved by the user.  The most likely reason for the problem is that it was created with an earlier, incompatible version of Blockly.  This message will be folllowed by technical information useful to engineers trying to understand the problem."}Could not load your saved file.  Perhaps it was created with a different version of Blockly?{/msg}</span>
  </div>

  <table width="100%" {call apps.menu}{param menu: $ij.menu /}{/call}>
    <tr>
      <td>
        <h1>
          <span id="title">
            <a href="../index.html">{{msg meaning="Apps.blocklyMessage" desc="The project name.  If readers of your language would know approximately how to pronounce 'Blockly', leave unchanged.  Otherwise, include a transliteration in parentheses, such as the Russian: 'Blockly (Блoкли)'.  This should be identical to {lb}{lb}msg-blockly|Maze-Apps.blocklyMessage{rb}{rb}."}}Blockly{{/msg}}</a>
            {sp}:{sp}
            {msg meaning="Maze.maze" desc="brief title - Specifies that this is Blockly's '''Maze''' tutorial."}
              Farmer
            {/msg}
          </span>
          {sp}&nbsp;{sp}
          {for $i in range(1, $ij.maxLevel + 1)}
            {sp}
            {if $i == $ij.level}
              {if $i > 9}
                <span class="selected doubleDigit tab">{$i}</span>
              {else}
                <span class="selected singleDigit tab">{$i}</span>
              {/if}
            {else}
              {if $i < $ij.level}
                <a class="tab previous" href="?page={$ij.page}&lang={$ij.lang}&level={$i}&skin={$ij.skin}">{$i}</a>
              {else}
                <a class="tab" href="?page={$ij.page}&lang={$ij.lang}&level={$i}&skin={$ij.skin}">{$i}</a>
              {/if}
            {/if}
          {/for}
        </h1>
      </td>
      <td class="farSide">
        <select id="languageMenu" onchange="BlocklyApps.changeLanguage();"></select>
        {sp}&nbsp;{sp}
        <button id="pegmanButton" onmousedown="Maze.showPegmanMenu();">
          <img src="../media/1x1.gif">
          <span>&#x25BE;</span>
        </button>
      </td>
    </tr>
  </table>

  /**
   * For processing the window input after finishing a level.
   */
  <div id="levelFeedback">
    <div style="padding-bottom: 0.7ex;"><br>
      <textarea id="levelFeedbackText" rows=3 cols=40 style="resize: none;
        border: 0; text-align: center; overflow: hidden; font-size: 16pt;
        font-family: Arial;">
        {if $ij.page == 1}
          {switch $ij.level}
            {case 1, 2}
              {msg meaning="Maze.hint1" desc="hint - 'block' refers to a
               child's stackable toys."}
                  You could solve this level with fewer blocks. Can you find
                  a solution with fewer blocks?
              {/msg}
            {case 3}
              {msg meaning="Maze.hint3" desc="hint - A 'repeat' block is used
               to repeat blocks over and over. The red marker is the goal to
               be reached in the maze."}
                 There is a solution using only 3 blocks. Can you find it? Try
                 using the while block.
              {/msg}
            {case 4}
              {msg meaning="Maze.hint4" desc="hint - A 'repeat' block is used
                to repeat blocks over and over. The red marker is the goal to
                be reached in the maze."}
                  Can you use the while block to complete the level with
                  only 4 blocks?
              {/msg}
            {case 5}
              {msg meaning="Maze.hint5" desc="TODO"}
                 There is a solution using only 3 blocks. Can you find it? Did
                 you try the new option on the while block?
              {/msg}
            {case 6}
              {msg meaning="Maze.hint3" desc="hint - A 'repeat' block is used
                to repeat blocks over and over. The red marker is the goal to
                be reached in the maze."}
                  Could you use two while blocks to complete this level with
                  fewer total blocks?
                {/msg}
            {case 7}
              {msg meaning="Maze.hint5" desc="hint - A 'repeat' block is used
               to repeat blocks over and over."}
                 There is a solution using only 3 blocks. Can you find it? Did
                 you using the repeat block?
              {/msg}
            {case 8}
              {msg meaning="Maze.hint5" desc="hint - A 'repeat' block is used
                to repeat blocks over and over."}
                 Can you find a solution using 4 blocks? Try putting a loop
                 inside of another loop. Remember, loop blocks are green.
              {/msg}
            {case 9}
              {msg meaning="Maze.hint9" desc="TODO"}
                 Can you find a solution using only 4 blocks? Try using one of
                 the green loop blocks.
              {/msg}
            {case 10}
              {msg meaning="Maze.hint5" desc="hint - A 'repeat' block is used
               to repeat blocks over and over."}
                 Can you find a solution using 6 blocks? Try including 2 if blocks.
              {/msg}
          {/switch}
        {elseif $ij.page == 2}
          {switch $ij.level}
            {case 1}
              {msg meaning="Maze.hint1" desc="hint - 'block' refers to a
                child's stackable toys."}Use only the blocks you need to get
                to complete the level.{/msg}
            {case 2, 3, 6, 8, 9}
              {msg meaning="Maze.hint1" desc="hint - 'block' refers to a
                child's stackable toys."}Try using the given function(s).{/msg}
            {case 4, 5, 7}
              {msg meaning="Maze.hint5" desc="hint - A 'repeat' block is used
                to repeat blocks over and over."}Try defining your own function
                and use it.{/msg}
          {/switch}
        {/if}
    </textarea>
    /**
     * Interstitial levels.
     */
    <div id="interstitial" style="display: none;">
    /**
     * Show image above avatar for these reinf levels.
     */
    {if $ij.level == 2}
      <img style="margin-left: 110px;" src="repeat_block.png">
    {/if}
    <br>
    <div id="reinfbubble">
      <span id="reinfMsg">
        {switch $ij.level}
          /* {case 2}
            {msg meaning="Maze.reinfMsg2" desc="instructions - 'block' refers
              to a child's stackable toys. A 'repeat' block is used to repeat
              blocks over and over. The red marker is the goal to be reached
              in the maze."}A repeat block repeats the blocks inside it until
              I reach the red marker.{/msg}
          {case 3}
            {msg meaning="Maze.reinfMsg3" desc="instructions - 'program'
              refers to a series of instructions that tell the computer
              what to do next."}You have just written some programs. Good job!{/msg}
          {case 4}
            {msg meaning="Maze.reinfMsg4" desc="instructions - program'
              refers to a series of instructions that tell the computer
              what to do next."}Which direction am I facing after this
              program ends?{/msg}
          {case 5}
            {msg meaning="Maze.reinfMsg5" desc="instructions - An example
              of an 'if' block is if there is a path to the left, turn
              left."}Here is an if block: I will turn left if there is a
              path to the left.{/msg}
          {case 6}
            {msg meaning="Maze.reinfMsg6" desc="instructions - An example
              of an 'if' block is if there is a path to the left, turn left.
              A 'repeat' block is used to repeat blocks over and over.
              'program' refers to a series of instructions that tell the
              computer what to do next."}We can place 'if' blocks inside
              'repeat' blocks. Where am I when this program ends?
              Click on the correct picture below.{/msg}
          {case 7}
            {msg meaning="Maze.reinfMsg7" desc="instructions - A 'repeat'
              block is used to repeat blocks over and over. "}Repeat blocks
              allow me to do an action multiple times without additional blocks.
              'if' blocks allow me to do an action based on my surroundings.{/msg}
          {case 9}
            {msg meaning="Maze.reinfMsg9" desc="instructions - An example of an
              'if-else' block is if there is a path ahead move forward, else
              turn left."}Here is an 'if-else' block: I move forward if there
              is a path ahead, but I turn left if not.{/msg}
          {case 10}
            {msg meaning="Maze.reinfMsg10" desc="instructions - 'block' refers
              to a child's stackable toys. A 'repeat' block is used to repeat
              blocks over and over. The red marker is the goal to be reached
              in the maze."}Will the blocks below move me to the red marker?{/msg} */
        {/switch}
      </span>
    </div>
    <img id="pegman_bubble" height=42 width=55 src="pegman_bubble.png">


    /**
     * Show image below avatar for these reinf levels.
     */
    {if $ij.level == 4}
      <p><img border=2 src="dirs.png">&nbsp;<img src="dirs2.png"><br>
    {/if}
    {if $ij.level == 5}
      <p><img style="margin-left: 110px;" src="ifblock.png"><br>
    {/if}
    {if $ij.level == 6}
      <img style="margin-top: 10px;" border=2 src="repeat_block2.png"><br>
    {/if}
    {if $ij.level == 9}
      <p><img style="margin-left: 60px; height: 150px; width: 260px;"
          src="if-else2.png"><br><br>
    {/if}
    {if $ij.level == 10}
     <p><img style="margin-left: 10px; height: 350px; width: 490px;"
         src="ifelse.png"><br>
    {/if}


  /**
   * Multiple choice question.
   */
  {if $ij.level == 4}
    <p>
      <input type="radio" name="q4" id="q41"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Maze.dirN" desc="An abbreviation of the direction
            North"} N{/msg}
        </span><br>
      <input type="radio" name="q4" id="q42"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Maze.dirE" desc="An abbreviation of the direction
            East"} E{/msg}
        </span><br>
      <input type="radio" name="q4" id="q43"
        onclick="Maze.showReinfHelp('q4w')">
        <span style="font-weight: bold">
          {msg meaning="Maze.dirS" desc="An abbreviation of the direction
            North"} S{/msg}
        </span><br>
      <input type="radio" name="q4" id="q44"
        onclick="Maze.showReinfHelp('q4r')">
        <span style="font-weight: bold">
          {msg meaning="Maze.dirW" desc="An abbreviation of the direction
            West"} W{/msg}
        </span><br><br>
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex;">
        <div style="text-align: center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden; font-size: 16pt;
          font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()&nbsp">
          <span>
            {msg meaning="Maze.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  {if $ij.level == 6}
    <p>
      <img style="margin-left: 30px;" src="repeat_blocka1.png"
        onclick="Maze.showReinfHelp('q5w')">
      <img style="margin-left: 20px;" src="repeat_blocka2.png"
        onclick="Maze.showReinfHelp('q5r')">
      <img style="margin-left: 20px;" src="repeat_blocka3.png"
        onclick="Maze.showReinfHelp('q5w')">
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex">
        <div style="text-align: center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden; font-size: 16pt;
          font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex;">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()">
          <span>
            {msg meaning="Maze.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  {if $ij.level == 10}
    <p>
      <input type="radio" name="q8" id="q81"
        onClick="Maze.showReinfHelp('q10r')">
        <span style="font-weight: bold">{msg meaning="Maze.yes" desc="Yes
          indicates that this option is true and correct."} Yes{/msg}
        </span><br>
      <input type="radio" name="q8" id="q82"
        onClick="Maze.showReinfHelp('q10w')">
        <span style="font-weight: bold">
          {msg meaning="Maze.no" desc="No indicates that this option is
            false and incorrect."} No{/msg}
        </span><br><br>
    </p>
    <div id="shadow"></div>
    <div id="reinfDone">
      <div style="padding-bottom: 0.7ex;">
        <div style="text-align:center;" id="reinfFeedbackImage"></div><br>
        <textarea id="reinfFeedbackText" rows=2 cols=40 style="resize: none;
          border: none; text-align: center; overflow: hidden;
          font-size: 16pt; font-family: Arial;"></textarea>
      </div>
      <div style="text-align: center; padding-top: 1ex; padding-right: 3ex;">
        <button id="okButton" class="launch" onclick="Maze.hideReinfHelp()">
          <span>
            {msg meaning="Maze.ok" desc="Closes the dialog box."}OK{/msg}
          </span>
        </button>
      </div>
    </div>
  {/if}
  </div>
  /**
  * End reinf level processing.
  */
  <br><br>
  <div style="text-align: center">
    <button id="tryLevelAgainButton" class="launch" style="display: none"
      onclick="Maze.closeDialogButtonClick(false);">
      {msg meaning="Maze.tryAgain" desc="button - Closes the dialog and
        stays on the current level"}Try again{/msg}
    </button>
    <button id="nextLevelButton" class="launch" style="display: none"
      onclick="Maze.closeDialogButtonClick(true);">
        {msg meaning="Maze.continue" desc="button - Closes the dialog and
          continues to the next level"}Continue{/msg}
    </button>
  </div>
  </div>
  </div>

  <div id="visualization">
    <div id="hintBubble">
      <div id="hint">
        {if $ij.page == 1}
          {call page1.hints /}
        {else}
          {call page2.hints /}
        {/if}
      </div>
    </div>
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1" id="svgMaze" width="400px" height="450px">
      <g id="look">
        <path d="M 0,-15 a 15 15 0 0 1 15 15" />
        <path d="M 0,-35 a 35 35 0 0 1 35 35" />
        <path d="M 0,-55 a 55 55 0 0 1 55 55" />
      </g>
    </svg>
    <div id="capacityBubble">
      <div id="capacity"></div>
    </div>
  </div>
  <table width="400">
    <tr>
      <td style="width: 190px; text-align: center; vertical-align: top;">
        <button title="{msg meaning="Maze.codeTooltip" desc="tooltip
          (pop-up help) for button; pressing the button causes a program
          in the JavaScript computer language to be displayed, based on the
          program created by the user."}See generated JavaScript code.{/msg}"
          onclick="BlocklyApps.showCode();">
          <img src='../media/1x1.gif' class="code icon21">
        </button>
        <button id="linkButton" title="{msg meaning="Maze.linkTooltip"
          desc="tooltip (pop-up help) for button; pressing the button
          causes the user's program to be saved and for a URL to be
          provided for retrieving it.  The word 'blocks' is as in
          children's toy blocks."}Save and link to blocks.{/msg}"
          onclick="BlocklyStorage.link();">
          <img src='../media/1x1.gif' class="link icon21">
        </button>
      </td>
      <td>
        <button id="runButton" class="launch" onclick="Maze.runButtonClick();">
            <img src="../media/1x1.gif" class="run icon21"> {msg meaning="Maze.runProgram"
            desc="button label - Pressing the button runs the computer program the user has
            written."} Run Program{/msg}
          </button>
        </button>
        <button id="resetButton" class="launch"
          onclick="Maze.resetButtonClick();" style="display: none">
            <img src="../media/1x1.gif" class="stop icon21">
              {msg meaning="Maze.resetProgram" desc="button label -
                Pressing the button causes Pegman return to the start of the maze
                (but does not delete the user's program.)"} Reset{/msg}
          </button>
      </td>
    </tr>
  </table>

  <script type="text/javascript" src="../blockly_compressed.js"></script>
  <script type="text/javascript" src="../javascript_compressed.js"></script>
  <script type="text/javascript" src="../{$ij.langSrc}"></script>
  <script type="text/javascript" src="blocks.js"></script>
  {call .toolbox /}
  <div id="blockly"></div>

  <div id="pegmanMenu"></div>
  <div id="shadow"></div>
{/template}

/**
 * Toolboxes for each level.
 */
{template .toolbox}
  <xml id="toolbox" style="display: none;">
    {if $ij.page == 1}
      {call page1.toolbox /}
    {else}
      {call page2.toolbox /}
    {/if}
  </xml>
{/template}
/**
 * Web page structure.
 */
{template .startBlocks}
  {if $ij.page == 1}
    {switch $ij.level}
      {case 1}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 2}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 3}
        <block type="maze_pickUpBall" x="70" y="70"></block>
      {case 4}
        <block type="maze_turn" x="70" y="70">
              <title name="DIR">turnRight</title>
        </block>
      {case 5}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 6}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 7}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 8}
        <block type="maze_untilBlocked" x="70" y="70"></block>
      {case 9}
        <block type="maze_moveForward" x="70" y="70"></block>
      {case 10}
        <block type="maze_untilBlockedOrNotClear" x="70" y="70"></block>
    {/switch}
  {else}
    {switch $ij.level}
      {case 2}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
      {case 3}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
      {case 4}
        {call .fillShovelfuls}
          {param shovelfuls: 5 /}
        {/call}
        <block type="procedures_defnoreturn" x="300" y="200">
          <mutation></mutation>
          <title name="NAME">fill 7</title>
        </block>
      {case 5}
      {case 6}
        <block type="procedures_defnoreturn" x="20" y="200">
          <mutation></mutation>
          <title name="NAME">remove tower</title>
          <statement name="STACK">
            <block type="maze_turn">
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">3</title>
                  <statement name="DO">
                    <block type="maze_pickUpBall">
                      <next>
                        <block type="maze_moveForward"></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat">
                              <title name="TIMES">3</title>
                              <statement name="DO">
                                <block type="maze_moveForward"></block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
        <block type="procedures_defnoreturn" x="300" y="200">
          <mutation></mutation>
          <title name="NAME">fill tower</title>
          <statement name="STACK">
            <block type="maze_turn">
              <title name="DIR">turnLeft</title>
              <next>
                <block type="controls_repeat">
                  <title name="TIMES">3</title>
                  <statement name="DO">
                    <block type="maze_putDownBall">
                      <next>
                        <block type="maze_moveForward"></block>
                      </next>
                    </block>
                  </statement>
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="controls_repeat">
                              <title name="TIMES">3</title>
                              <statement name="DO">
                                <block type="maze_moveForward"></block>
                              </statement>
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnLeft</title>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {case 7}
      {case 8}
        <block type="procedures_defnoreturn" x="20" y="200">
          <mutation></mutation>
          <title name="NAME">jump hurdle and remove 1</title>
          <statement name="STACK">
            <block type="maze_turn">
              <title name="DIR">turnLeft</title>
              <next>
                <block type="maze_moveForward">
                  <next>
                    <block type="maze_turn">
                      <title name="DIR">turnRight</title>
                      <next>
                        <block type="maze_moveForward">
                          <next>
                            <block type="maze_moveForward">
                              <next>
                                <block type="maze_turn">
                                  <title name="DIR">turnRight</title>
                                  <next>
                                    <block type="maze_moveForward">
                                      <next>
                                        <block type="maze_pickUpBall">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnLeft
                                              </title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
      {case 9}
        <block type="procedures_defnoreturn" x="20" y="200">
          <mutation></mutation>
          <title name="NAME">remove 1 and jump hurdle</title>
          <statement name="STACK">
            <block type="maze_pickUpBall">
              <next>
                <block type="maze_turn">
                  <title name="DIR">turnLeft</title>
                  <next>
                    <block type="maze_moveForward">
                      <next>
                        <block type="maze_turn">
                          <title name="DIR">turnRight</title>
                          <next>
                            <block type="maze_moveForward">
                              <next>
                                <block type="maze_moveForward">
                                  <next>
                                    <block type="maze_turn">
                                      <title name="DIR">turnRight</title>
                                      <next>
                                        <block type="maze_moveForward">
                                          <next>
                                            <block type="maze_turn">
                                              <title name="DIR">turnLeft
                                              </title>
                                            </block>
                                          </next>
                                        </block>
                                      </next>
                                    </block>
                                  </next>
                                </block>
                              </next>
                            </block>
                          </next>
                        </block>
                      </next>
                    </block>
                  </next>
                </block>
              </next>
            </block>
          </statement>
        </block>
    {/switch}
  {/if}
{/template}
/**
 * Template to create function for filling in shovels.
 * @param shovelfuls
 */
{template .fillShovelfuls}
  <block type="procedures_defnoreturn" x="20" y="200">
    <mutation></mutation>
    <title name="NAME">fill {$shovelfuls}</title>
    <statement name="STACK">
      <block type="controls_repeat">
        <title name="TIMES">{$shovelfuls}</title>
        <statement name="DO">
          <block type="maze_putDownBall"></block>
        </statement>
       </block>
    </statement>
  </block>
{/template}
/**
 * @param? doStatement An optional statement for the do statement in the loop.
 * @param? upperLimit The upper limit of the for loop.
 */
{template .controlsFor autoescape="false"}
  <block type="controls_for">
    <value name="FROM">
      <block type="math_number">
        <title name="NUM">1</title>
      </block>
    </value>
    <value name="TO">
      <block type="math_number">
        <title name="NUM">
          {$upperLimit ? $upperLimit : 10}
        </title>
      </block>
    </value>
    <value name="BY">
      <block type="math_number">
        <title name="NUM">1</title>
      </block>
    </value>
    {if $doStatement}
      <statement name="DO">
         {$doStatement}
      </statement>
    {/if}
  </block>
{/template}
